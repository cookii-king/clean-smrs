Directory structure and file contents for: django

Generating directory structure...
django
├── directory-to-text.bash
├── directory_structure_and_files.txt
├── manage.py
├── media
│   └── product
│       ├── images
│       └── videos
│           └── 204565-924698132_small.mp4
├── pages
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── classes
│   │   ├── __init__.py
│   │   ├── account
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── api
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── authentication
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── cart
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── checkout
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── log
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── observation
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── order
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── plan
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── price
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── product
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── setup_intent
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── subscription
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   ├── system
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   ├── form.py
│   │   │   ├── model.py
│   │   │   ├── serializer.py
│   │   │   ├── signal.py
│   │   │   └── view.py
│   │   └── webhook
│   │       ├── __init__.py
│   │       ├── admin.py
│   │       ├── form.py
│   │       ├── model.py
│   │       ├── serializer.py
│   │       ├── signal.py
│   │       └── view.py
│   ├── config
│   │   ├── __init__.py
│   │   └── config.py
│   ├── forms.py
│   ├── management
│   │   └── commands
│   │       └── create_superuser_if_none.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_product_account_mfa_confirmed_apikey_cart_price_and_more.py
│   │   ├── 0003_alter_cart_customer.py
│   │   ├── 0004_alter_cart_customer.py
│   │   ├── 0005_product_stock.py
│   │   ├── 0006_checkout_plan_checkoutlineitem.py
│   │   ├── 0007_order_orderitem.py
│   │   ├── 0008_alter_order_table_alter_orderitem_table.py
│   │   ├── 0009_subscriptionitem.py
│   │   └── __init__.py
│   ├── models.py
│   ├── templatetags
│   │   ├── __init__.py
│   │   └── custom_filters.py
│   ├── tests.py
│   ├── urls.py
│   ├── utils.py
│   ├── validators.py
│   └── views.py
├── static
├── system
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── templates
    ├── account
    │   ├── account.html
    │   └── edit.html
    ├── authentication
    │   ├── confirm-email.html
    │   ├── enable-mfa.html
    │   ├── login.html
    │   ├── register.html
    │   └── verify-mfa.html
    ├── cart
    │   ├── cart.html
    │   └── carts.html
    ├── checkout
    │   ├── checkout.html
    │   ├── checkouts.html
    │   ├── failure.html
    │   └── success.html
    ├── observation
    │   ├── create.html
    │   ├── observation.html
    │   ├── observations.html
    │   └── update.html
    ├── order
    │   ├── order.html
    │   └── orders.html
    ├── payment-link
    │   └── payment-link.html
    ├── plan
    │   ├── create.html
    │   ├── edit.html
    │   ├── plan.html
    │   └── plans.html
    ├── product
    │   ├── create.html
    │   ├── edit.html
    │   ├── product.html
    │   └── products.html
    ├── subscription
    │   ├── subscription.html
    │   └── subscriptions.html
    ├── system
    │   ├── 404.html
    │   ├── about.html
    │   ├── community-forum.html
    │   ├── contact.html
    │   ├── error.html
    │   ├── faqs.html
    │   ├── index.html
    │   ├── plans-and-pricing.html
    │   ├── privacy-policy.html
    │   ├── resources.html
    │   ├── response.html
    │   ├── support-ticket.html
    │   ├── support.html
    │   ├── terms-of-service.html
    │   ├── tutorial.html
    │   ├── tutorials.html
    │   ├── user-guide.html
    │   ├── user-guides.html
    │   └── whitepaper.html
    ├── webhook
    │   └── webhook.html
    └── widgets
        ├── base.html
        ├── footer.html
        └── navbar.html

43 directories, 193 files

Appending file contents...
File: django/directory_structure_and_files.txt
----------------------------------------
Directory structure and file contents for: pages

Generating directory structure...
pages
├── __init__.py
├── admin.py
├── apps.py
├── classes
│   ├── __init__.py
│   ├── account
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── api
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── authentication
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── cart
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── checkout
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── log
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── observation
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── order
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── plan
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── price
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── product
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── setup_intent
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── subscription
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   ├── system
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── form.py
│   │   ├── model.py
│   │   ├── serializer.py
│   │   ├── signal.py
│   │   └── view.py
│   └── webhook
│       ├── __init__.py
│       ├── admin.py
│       ├── form.py
│       ├── model.py
│       ├── serializer.py
│       ├── signal.py
│       └── view.py
├── config
│   ├── __init__.py
│   └── config.py
├── forms.py
├── management
│   └── commands
│       └── create_superuser_if_none.py
├── migrations
│   ├── 0001_initial.py
│   ├── 0002_product_account_mfa_confirmed_apikey_cart_price_and_more.py
│   ├── 0003_alter_cart_customer.py
│   ├── 0004_alter_cart_customer.py
│   ├── 0005_product_stock.py
│   ├── 0006_checkout_plan_checkoutlineitem.py
│   ├── 0007_order_orderitem.py
│   ├── 0008_alter_order_table_alter_orderitem_table.py
│   ├── 0009_subscriptionitem.py
│   └── __init__.py
├── models.py
├── templatetags
│   ├── __init__.py
│   └── custom_filters.py
├── tests.py
├── urls.py
├── utils.py
├── validators.py
└── views.py

22 directories, 131 files

Appending file contents...
File: pages/templatetags/custom_filters.py
----------------------------------------
from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)

@register.filter
def get_amount(item):
    # Check if the item has an 'amount' attribute (for Plan) or 'unit_amount' (for Price)
    return getattr(item, 'amount', None) or getattr(item, 'unit_amount', None)

@register.filter
def cart_total(cart_items):
    """
    Calculate the total cost of the cart.
    """
    return sum(
        item.quantity * item.product.prices.first().unit_amount for item in cart_items if item.product.prices.exists()
    )

@register.filter
def multiply(value, arg):
    try:
        return float(value) * float(arg)
    except (ValueError, TypeError):
        return 0

@register.filter
def currency(value):
    """Format a number as currency with commas and two decimal places."""
    try:
        # Convert from cents to main currency unit
        value = float(value) / 100
        return f"£{value:,.2f}"
    except (ValueError, TypeError):
        return value  # Return the original value if conversion fails

@register.filter
def sum_prices(items):
    return sum(item.price.unit_amount * item.quantity for item in items)


File: pages/templatetags/__init__.py
----------------------------------------



File: pages/migrations/0006_checkout_plan_checkoutlineitem.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 12:06

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0005_product_stock'),
    ]

    operations = [
        migrations.CreateModel(
            name='Checkout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mode', models.CharField(choices=[('payment', 'Payment'), ('setup', 'Setup'), ('subscription', 'Subscription')], default='payment', max_length=255)),
                ('payment_status', models.CharField(choices=[('no_payment_required', 'No Payment Required'), ('paid', 'Paid'), ('unpaid', 'Unpaid')], default='unpaid', max_length=255)),
                ('status', models.CharField(choices=[('complete', 'Complete'), ('expired', 'Expired'), ('open', 'Open')], max_length=255, null=True)),
                ('stripe_checkout_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('success_url', models.CharField(max_length=255)),
                ('return_url', models.CharField(max_length=255)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checkouts', to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id')),
            ],
            options={
                'db_table': 'pages_checkout',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('currency', models.CharField(max_length=3)),
                ('interval', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('stripe_plan_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plans', to='pages.product', to_field='stripe_product_id')),
            ],
            options={
                'db_table': 'pages_plan',
            },
        ),
        migrations.CreateModel(
            name='CheckoutLineItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('checkout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkout_line_items', to='pages.checkout')),
                ('price', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checkout_line_items', to='pages.price', to_field='stripe_price_id')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checkout_line_items', to='pages.plan', to_field='stripe_plan_id')),
            ],
            options={
                'db_table': 'pages_checkout_line_item',
            },
        ),
    ]



File: pages/migrations/0009_subscriptionitem.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 14:52

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0008_alter_order_table_alter_orderitem_table'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubscriptionItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('stripe_subscription_item_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscription_items', to='pages.plan', to_field='stripe_plan_id')),
                ('price', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscription_items', to='pages.price', to_field='stripe_price_id')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_items', to='pages.subscription')),
            ],
            options={
                'db_table': 'pages_subscription_item',
            },
        ),
    ]



File: pages/migrations/__init__.py
----------------------------------------



File: pages/migrations/0005_product_stock.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 11:56

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0004_alter_cart_customer'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='stock',
            field=models.IntegerField(default=1),
        ),
    ]



File: pages/migrations/0008_alter_order_table_alter_orderitem_table.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 13:06

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0007_order_orderitem'),
    ]

    operations = [
        migrations.AlterModelTable(
            name='order',
            table='pages_order',
        ),
        migrations.AlterModelTable(
            name='orderitem',
            table='pages_order_item',
        ),
    ]



File: pages/migrations/0002_product_account_mfa_confirmed_apikey_cart_price_and_more.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 11:39

import django.db.models.deletion
import django.utils.timezone
import secrets
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('good', 'Good'), ('service', 'Service')], default='good', max_length=255)),
                ('reoccurrence', models.CharField(choices=[('one-time', 'One Time'), ('reoccurring', 'Re-Occurring')], default='one-time', max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('stripe_product_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pages_product',
            },
        ),
        migrations.AddField(
            model_name='account',
            name='mfa_confirmed',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(default=secrets.token_urlsafe, max_length=50, unique=True)),
                ('active', models.BooleanField(default=True)),
                ('revealed', models.BooleanField(default=False)),
                ('primary', models.BooleanField(default=False)),
                ('credit_limit', models.PositiveIntegerField(default=1000)),
                ('credits_used', models.PositiveIntegerField(default=0)),
                ('reset_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pages_api_key',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id')),
            ],
            options={
                'db_table': 'pages_cart',
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('currency', models.CharField(max_length=3)),
                ('recurring', models.JSONField(max_length=1024, null=True)),
                ('unit_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('stripe_price_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='pages.product', to_field='stripe_product_id')),
            ],
            options={
                'db_table': 'pages_price',
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='pages.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.product', to_field='stripe_product_id')),
            ],
            options={
                'db_table': 'pages_cart_item',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='product/images/')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='pages.product')),
            ],
            options={
                'db_table': 'pages_product_image',
            },
        ),
        migrations.CreateModel(
            name='ProductVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(blank=True, null=True, upload_to='product/videos/')),
                ('video_url', models.URLField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='pages.product')),
            ],
            options={
                'db_table': 'pages_product_video',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('incomplete', 'incomplete'), ('incomplete_expired', 'incomplete_expired'), ('trialing', 'trialing'), ('active', 'active'), ('past_due', 'past_due'), ('canceled', 'canceled'), ('unpaid', 'unpaid'), ('paused', 'paused')], default=None, max_length=255)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id')),
            ],
            options={
                'db_table': 'pages_subscription',
            },
        ),
    ]



File: pages/migrations/0004_alter_cart_customer.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 11:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0003_alter_cart_customer'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cart',
            name='customer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id'),
        ),
    ]



File: pages/migrations/0007_order_orderitem.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 13:03

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0006_checkout_plan_checkoutlineitem'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('checkout', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.checkout', to_field='stripe_checkout_id')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.order')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.plan', to_field='stripe_plan_id')),
                ('price', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.price', to_field='stripe_price_id')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.product', to_field='stripe_product_id')),
            ],
        ),
    ]



File: pages/migrations/0003_alter_cart_customer.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 11:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0002_product_account_mfa_confirmed_apikey_cart_price_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cart',
            name='customer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='carts', to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id'),
        ),
    ]



File: pages/migrations/0001_initial.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 02:07

import django.contrib.auth.models
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('email_confirmation_secret', models.CharField(blank=True, max_length=16, null=True)),
                ('email_confirmed', models.BooleanField(default=False)),
                ('mfa_secret', models.CharField(blank=True, max_length=16, null=True)),
                ('mfa_enabled', models.BooleanField(default=False)),
                ('password', models.CharField(max_length=255)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'pages_account',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]



File: pages/models.py
----------------------------------------
from .classes.account.model import *
from .classes.authentication.model import *
from .classes.system.model import *
from .classes.product.model import *
from .classes.plan.model import *
from .classes.price.model import *
from .classes.subscription.model import *
from .classes.cart.model import *
from .classes.checkout.model import *
from .classes.api.model import *
from .classes.order.model import *
from .classes.observation.model import *
from .classes.webhook.model import *


File: pages/config/config.py
----------------------------------------
import stripe, os

STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')

stripe.api_key = STRIPE_SECRET_KEY


File: pages/config/__init__.py
----------------------------------------



File: pages/classes/webhook/signal.py
----------------------------------------



File: pages/classes/webhook/__init__.py
----------------------------------------



File: pages/classes/webhook/model.py
----------------------------------------



File: pages/classes/webhook/form.py
----------------------------------------



File: pages/classes/webhook/view.py
----------------------------------------
from django.shortcuts import render, redirect
from django.utils.timezone import now, timedelta
from rest_framework.views import APIView
from rest_framework.response import Response
from ...config.config import stripe
from django.conf import settings
from ...models import Account, Order, Price, Product, OrderItem, Subscription, SubscriptionItem, Plan
import random, string
from django.core.mail import send_mail
from django.http import JsonResponse
import logging



logger = logging.getLogger(__name__)
class WebhookView(APIView):
    def post(self, request):
        payload = request.body
        sig_header = request.headers.get('Stripe-Signature')
        endpoint_secret = settings.STRIPE_WEBHOOK_SECRET

        try:
            event = stripe.Webhook.construct_event(
                payload, sig_header, endpoint_secret
            )
        except ValueError as e:
            logger.error(f"Invalid payload: {e}")
            return Response({"error": "Invalid payload"}, status=400)
        except stripe.error.SignatureVerificationError as e:
            logger.error(f"Invalid signature: {e}")
            return Response({"error": "Invalid signature"}, status=400)

        # Handle the event
        if event['type'] == 'checkout.session.completed':
            self.handle_checkout_session_completed(event)
        elif event['type'] == 'customer.subscription.created':
            self.handle_subscription_created(event)
        elif event['type'] == 'customer.subscription.updated':
            self.handle_subscription_updated(event)
        elif event['type'] == 'customer.subscription.deleted':
            self.handle_subscription_deleted(event)
        else:
            logger.warning(f"Unhandled event type: {event['type']}")

        # Return a success response for handled events
        return Response({"message": "Webhook processed successfully"}, status=200)

    def handle_checkout_session_completed(self, event):
        session = event['data']['object']
        customer_id = session['customer']
        checkout_id = session['id']
        payment_status = session['payment_status']
        line_items = stripe.checkout.Session.list_line_items(checkout_id)

        if payment_status == 'paid':
            try:
                account = Account.objects.get(stripe_customer_id=customer_id)
                subscription = Subscription.objects.create(
                    customer=account,
                    stripe_subscription_id=session['subscription'],
                    status='active'
                )
                for item in line_items['data']:
                    plan_id = item['price']['id']
                    price_id = item['price']['id']
                    quantity = item['quantity']
                    plan = Plan.objects.get(stripe_plan_id=plan_id)
                    price = Price.objects.get(stripe_price_id=price_id)
                    SubscriptionItem.objects.create(
                        subscription=subscription,
                        plan=plan,
                        price=price,
                        quantity=quantity
                    )
                logger.info(f"Subscription created successfully for customer {account.email}")
            except Account.DoesNotExist:
                logger.error(f"Customer not found for checkout: {customer_id}")
                return Response({"error": "Customer not found"}, status=404)
            except Exception as e:
                logger.error(f"Error creating subscription: {e}")
                return Response({"error": f"Error creating subscription: {e}"}, status=500)

    def handle_subscription_created(self, event):
        subscription_data = event['data']['object']
        customer_id = subscription_data['customer']
        subscription_id = subscription_data['id']
        status = subscription_data['status']

        try:
            account = Account.objects.get(stripe_customer_id=customer_id)
            subscription = Subscription.objects.create(
                customer=account,
                stripe_subscription_id=subscription_id,
                status=status
            )
            for item in subscription_data['items']['data']:
                price_id = item['price']['id']
                quantity = item['quantity']
                price = Price.objects.get(stripe_price_id=price_id)
                SubscriptionItem.objects.create(
                    subscription=subscription,
                    price=price,
                    quantity=quantity,
                    stripe_subscription_item_id=item['id']
                )
            logger.info(f"Subscription created successfully for customer {account.email}")
        except Account.DoesNotExist:
            logger.error(f"Customer not found for subscription: {customer_id}")
            return Response({"error": "Customer not found"}, status=404)
        except Exception as e:
            logger.error(f"Error creating subscription: {e}")
            return Response({"error": f"Error creating subscription: {e}"}, status=500)

    def handle_subscription_updated(self, event):
        subscription_data = event['data']['object']
        subscription_id = subscription_data['id']
        status = subscription_data['status']

        try:
            subscription = Subscription.objects.get(stripe_subscription_id=subscription_id)
            subscription.status = status
            subscription.save()
            logger.info(f"Subscription updated successfully for subscription ID {subscription_id}")
        except Subscription.DoesNotExist:
            logger.error(f"Subscription not found: {subscription_id}")
            return Response({"error": "Subscription not found"}, status=404)
        except Exception as e:
            logger.error(f"Error updating subscription: {e}")
            return Response({"error": f"Error updating subscription: {e}"}, status=500)

    def handle_subscription_deleted(self, event):
        subscription_data = event['data']['object']
        subscription_id = subscription_data['id']

        try:
            subscription = Subscription.objects.get(stripe_subscription_id=subscription_id)
            subscription.deleted = now()
            subscription.save()
            logger.info(f"Subscription deleted successfully for subscription ID {subscription_id}")
        except Subscription.DoesNotExist:
            logger.error(f"Subscription not found: {subscription_id}")
            return Response({"error": "Subscription not found"}, status=404)
        except Exception as e:
            logger.error(f"Error deleting subscription: {e}")
            return Response({"error": f"Error deleting subscription: {e}"}, status=500)
    
    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/webhook/admin.py
----------------------------------------



File: pages/classes/webhook/serializer.py
----------------------------------------



File: pages/classes/order/signal.py
----------------------------------------



File: pages/classes/order/__init__.py
----------------------------------------



File: pages/classes/order/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from django.utils.timezone import now
from django.contrib.auth.models import AbstractUser
from django.core.mail import send_mail
from ...config.config import stripe
from system.settings import DEFAULT_FROM_EMAIL, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD

from ...models import Account, Price, Plan, Product, Checkout

class Order(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer = models.ForeignKey(Account, to_field='stripe_customer_id', on_delete=models.CASCADE)
    checkout = models.ForeignKey(
        Checkout, 
        to_field='stripe_checkout_id', 
        on_delete=models.CASCADE, 
        related_name='order_items',
        null=True
    )
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)
    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_order"

class OrderItem(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    order = models.ForeignKey(Order, related_name='order_items', on_delete=models.CASCADE)
    product = models.ForeignKey(
        Product, 
        to_field='stripe_product_id', 
        on_delete=models.CASCADE, 
        related_name='order_items',
        null=True
    )
    price = models.ForeignKey(
        Price, 
        to_field='stripe_price_id', 
        on_delete=models.CASCADE, 
        related_name='order_items',
        null=True
    )
    plan = models.ForeignKey(
        Plan, 
        to_field='stripe_plan_id', 
        on_delete=models.CASCADE, 
        related_name='order_items',
        null=True
    )
    quantity = models.PositiveIntegerField(default=1)
    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_order_item"


File: pages/classes/order/form.py
----------------------------------------



File: pages/classes/order/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from ...models import Order, Account

class OrderView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            account = self.authenticate_user(request)
            user = request.user
            account = Account.objects.filter(id=user.id).first()
            # Fetch all orders for the user
            orders = Order.objects.filter(customer=account.stripe_customer_id).select_related(
                'customer'
            ).prefetch_related('order_items__product', 'order_items__price', 'order_items__plan')
            # Handle GET requests
            return render(request, 'order/orders.html', {"orders": orders})
        except Exception as e:
            message = f"'GET' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class OrdersView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Fetch orders for the authenticated user
            if request.user.is_authenticated:
                orders = Order.objects.filter(customer=request.user)
            else:
                orders = []

            # Render the orders template with the orders context
            return render(request, 'order/orders.html', {'orders': orders})
        except Exception as e:
            message = f"'GET' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/order/admin.py
----------------------------------------



File: pages/classes/order/serializer.py
----------------------------------------



File: pages/classes/plan/signal.py
----------------------------------------



File: pages/classes/plan/__init__.py
----------------------------------------



File: pages/classes/plan/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from ...models import Product
from django.utils.timezone import now

class Plan(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    currency = models.CharField(max_length=3)
    interval = models.CharField(max_length=255) 
    product = models.ForeignKey(Product, to_field='stripe_product_id', on_delete=models.CASCADE, related_name='plans')
    amount = models.DecimalField(default=0.00, max_digits=10, decimal_places=2)
    stripe_plan_id = models.CharField(max_length=255, blank=True, unique=True, null=True)  # Stripe product ID
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    # Methods
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        super().delete(*args, **kwargs)

    # Meta Class
    class Meta:
        db_table = "pages_plan"


File: pages/classes/plan/form.py
----------------------------------------



File: pages/classes/plan/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response

class PlanView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    

class PlansView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/plan/admin.py
----------------------------------------



File: pages/classes/plan/serializer.py
----------------------------------------



File: pages/classes/__init__.py
----------------------------------------



File: pages/classes/product/signal.py
----------------------------------------



File: pages/classes/product/__init__.py
----------------------------------------



File: pages/classes/product/model.py
----------------------------------------
import uuid
from django.db import models
from django.utils.timezone import now
from ...config.config import stripe
class Product(models.Model):
    PRODUCT_TYPE_CHOICES = [
        ('good', 'Good'),
        ('service', 'Service'),
    ]
    PRODUCT_REOCCURRENCE_CHOICES = [
        ('one-time', 'One Time'),
        ('reoccurring', 'Re-Occurring'),
    ]
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255)
    type = models.CharField(max_length=255, choices=PRODUCT_TYPE_CHOICES, default='good')
    reoccurrence = models.CharField(max_length=255, choices=PRODUCT_REOCCURRENCE_CHOICES, default='one-time')
    description = models.TextField(blank=True, null=True)
    stripe_product_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    stock = models.IntegerField(default=1)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def create_stripe_product(self):
        """Creates a Stripe product and stores the product ID."""
        try:
            # Create a new Stripe product
            product = stripe.Product.create(
                name=self.name,
                type=self.type,
                description=self.description or None,
            )
            # Store the Stripe product ID in the product
            self.stripe_product_id = product.id
            self.save()
            return product
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to create Stripe product: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to create Stripe product: {e}")

    def update_stripe_product(self, **kwargs):
        """Updates the Stripe product with the provided details."""
        if not self.stripe_product_id:
            raise Exception("Stripe product ID not set for this product.")

        try:
            # Update the Stripe product
            product = stripe.Product.modify(
                self.stripe_product_id,
                **kwargs
            )
            # Optionally update local fields if needed
            if 'name' in kwargs:
                self.name = kwargs['name']
            if 'description' in kwargs:
                self.description = kwargs['description']
            self.save()
            return product
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to update Stripe product: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to update Stripe product: {e}")
    
    def delete_stripe_product(self):
        """Deletes the Stripe product associated with this product."""
        if not self.stripe_product_id:
            raise Exception("Stripe product ID not set for this product.")

        try:
            # Delete the Stripe product
            stripe.Product.delete(self.stripe_product_id)

            # Optionally, clear the stripe_product_id field
            self.stripe_product_id = None
            self.save()
            print("Stripe product deleted successfully.")
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to delete Stripe product: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to delete Stripe product: {e}")
        
    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_product"
    
class ProductImage(models.Model):
    product = models.ForeignKey(Product, related_name='images', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='product/images/', blank=True, null=True)
    image_url = models.URLField(blank=True, null=True)  # For external image URLs
    uploaded_at = models.DateTimeField(auto_now_add=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def create_product_image(product, image=None, image_url=None):
        """Creates a new ProductImage."""
        product_image = ProductImage.objects.create(
            product=product,
            image=image,
            image_url=image_url
        )
        return product_image
    
    def update_product_image(product_image, image=None, image_url=None):
        """Updates an existing ProductImage."""
        if image is not None:
            product_image.image = image
        if image_url is not None:
            product_image.image_url = image_url
        product_image.save()
        return product_image

    def delete_product_image(product_image):
        """Deletes a ProductImage."""
        # product_image.deleted = now()
        # product_image.save()
        # Alternatively, to permanently delete:
        product_image.delete()


    def __str__(self):
        return str(self.id)
    
    # Meta Class
    class Meta:
        db_table = "pages_product_image"


class ProductVideo(models.Model):
    product = models.ForeignKey(Product, related_name='videos', on_delete=models.CASCADE)
    video = models.FileField(upload_to='product/videos/', blank=True, null=True)
    video_url = models.URLField(blank=True, null=True)  # For external image URLs
    uploaded_at = models.DateTimeField(auto_now_add=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def create_product_video(product, video=None, video_url=None):
        """Creates a new ProductVideo."""
        product_video = ProductVideo.objects.create(
            product=product,
            video=video,
            video_url=video_url
        )
        return product_video

    def update_product_video(product_video, video=None, video_url=None):
        """Updates an existing ProductVideo."""
        if video is not None:
            product_video.video = video
        if video_url is not None:
            product_video.video_url = video_url
        product_video.save()
        return product_video

    def delete_product_video(product_video):
        """Deletes a ProductVideo."""
        # product_video.deleted = now()
        # product_video.save()
        # Alternatively, to permanently delete:
        product_video.delete()


    def __str__(self):
        return str(self.id)
    
    # Meta Class
    class Meta:
        db_table = "pages_product_video"



File: pages/classes/product/form.py
----------------------------------------
from django import forms
from ...models import Product, ProductImage, ProductVideo
class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['name', 'type', 'reoccurrence', 'description']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter product name'}),
            'type': forms.Select(attrs={'class': 'form-control'}),
            'reoccurrence': forms.Select(attrs={'class': 'form-control'}),
            'description': forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Enter product description', 'rows': 3}),
        }
        
class ProductImageForm(forms.ModelForm):
    class Meta:
        model = ProductImage
        fields = ['image', 'image_url']
        widgets = {
            'image': forms.ClearableFileInput(attrs={'class': 'form-control'}),
            'image_url': forms.URLInput(attrs={'class': 'form-control', 'placeholder': 'Enter external image URL'}),
        }

class ProductVideoForm(forms.ModelForm):
    class Meta:
        model = ProductVideo
        fields = ['video', 'video_url']
        widgets = {
            'video': forms.ClearableFileInput(attrs={'class': 'form-control'}),
            'video_url': forms.URLInput(attrs={'class': 'form-control', 'placeholder': 'Enter external video URL'}),
        }


File: pages/classes/product/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from django.shortcuts import render, redirect, get_object_or_404
from django.utils.timezone import now
# from ...models import Product
from ...models import Product, ProductImage, ProductVideo, Price
from ...forms import ProductForm, ProductImageForm, ProductVideoForm  # Assume you have these forms

class ProductView(APIView):
    def post(self, request, product_id=None):
        try:
            if product_id:
                # Check if the action is to delete the product
                if request.POST.get('action') == 'delete':
                    product = get_object_or_404(Product, id=product_id)
                    product.delete_stripe_product()  # Delete from Stripe
                    product.delete()  # Delete from local database
                    message = "Product deleted successfully."
                    is_error = False
                    status_code = 200
                    return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

                # Update existing product
                product = get_object_or_404(Product, id=product_id)
                form = ProductForm(request.POST, request.FILES, instance=product)
            else:
                # Create new product
                form = ProductForm(request.POST, request.FILES)

            if form.is_valid():
                product = form.save()

                # Handle image uploads
                for image in request.FILES.getlist('images'):
                    ProductImage.objects.create(product=product, image=image)

                # Handle video uploads
                for video in request.FILES.getlist('videos'):
                    ProductVideo.objects.create(product=product, video=video)

                # Create product in Stripe if it doesn't already exist
                if not product.stripe_product_id:
                    product.create_stripe_product()

                # Handle price creation
                price_amount = request.POST.get('price_amount')
                price_currency = request.POST.get('price_currency', 'usd')
                price_interval = request.POST.get('price_interval', 'one_time')

                if price_amount:  # Only create a price if the amount is provided
                    recurring = (
                        {"interval": price_interval}
                        if price_interval in ["month", "year"]
                        else None
                    )
                    try:
                        # Create a local Price instance
                        price = Price.objects.create(
                            product=product,
                            unit_amount=float(price_amount),
                            currency=price_currency,
                            recurring=recurring,
                        )

                        # Create the Stripe price and save the Stripe ID
                        price.create_stripe_price()

                    except Exception as e:
                        print(f"Error creating price: {e}")
                        message = f"Failed to create price: {e}"
                        is_error = True
                        status_code = 500
                        return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

                message = "Product and price saved successfully."
                is_error = False
                status_code = 201
            else:
                print("Form errors:", form.errors)
                message = "Form is not valid."
                is_error = True
                status_code = 400

            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    # def post(self, request, product_id=None):
    #     try:
    #         if product_id:
    #             # Check if the action is to delete the product
    #             if request.POST.get('action') == 'delete':
    #                 product = get_object_or_404(Product, id=product_id)
    #                 product.delete_stripe_product()  # Delete from Stripe
    #                 product.delete()  # Delete from local database
    #                 message = "Product deleted successfully."
    #                 is_error = False
    #                 status_code = 200
    #                 return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    #             # Update existing product
    #             product = get_object_or_404(Product, id=product_id)
    #             form = ProductForm(request.POST, request.FILES, instance=product)
    #         else:
    #             # Create new product
    #             form = ProductForm(request.POST, request.FILES)

    #         if form.is_valid():
    #             product = form.save()

    #             # Handle image uploads
    #             for image in request.FILES.getlist('images'):
    #                 ProductImage.objects.create(product=product, image=image)

    #             # Handle video uploads
    #             for video in request.FILES.getlist('videos'):
    #                 ProductVideo.objects.create(product=product, video=video)

    #             # Create product in Stripe if it doesn't already exist
    #             if not product.stripe_product_id:
    #                 product.create_stripe_product()

    #             message = "Product saved successfully."
    #             is_error = False
    #             status_code = 201
    #         else:
    #             print("Form errors:", form.errors)
    #             message = "Form is not valid."
    #             is_error = True
    #             status_code = 400

    #         return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    #     except Exception as e:
    #         message = f"'POST' Method Failed for ProductView: {e}"
    #         is_error = True
    #         status_code = 500
    #         return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    
    def get(self, request, product_id=None):
        try:
            if product_id:
                # Editing an existing product
                product = get_object_or_404(Product, id=product_id)
                form = ProductForm(instance=product)
                images = ProductImage.objects.filter(product=product)
                videos = ProductVideo.objects.filter(product=product)
            else:
                # Creating a new product
                form = ProductForm()
                images = None
                videos = None

            return render(request, 'product/create.html', {
                'form': form,
                'images': images,
                'videos': videos,
                'product': product if product_id else None
            })
        except Exception as e:
            message = f"'GET' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request, product_id):
        try:
            product = get_object_or_404(Product, id=product_id)
            product.delete()
            message = "Product deleted successfully."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class ProductsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Filter products to show only goods
            products = Product.objects.filter(deleted__isnull=True, type='good')
            return render(request, 'product/products.html', {'products': products})
        except Exception as e:
            message = f"'GET' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request, product_id):
        try:
            product = get_object_or_404(Product, id=product_id)
            product.deleted = now()
            product.save()
            message = "Product deleted successfully."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/product/admin.py
----------------------------------------



File: pages/classes/product/serializer.py
----------------------------------------



File: pages/classes/checkout/signal.py
----------------------------------------



File: pages/classes/checkout/__init__.py
----------------------------------------



File: pages/classes/checkout/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from django.utils.timezone import now
from django.contrib.auth.models import AbstractUser
from django.core.mail import send_mail
from ...config.config import stripe
from system.settings import DEFAULT_FROM_EMAIL, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD

from ...models import Account, Price, Plan

class Checkout(models.Model):
    CHECKOUT_MODE_CHOICES = [
        ('payment', 'Payment'),
        ('setup', 'Setup'),
        ('subscription', 'Subscription')
    ]
    CHECKOUT_PAYMENT_STATUS_CHOICES = [
        ('no_payment_required', 'No Payment Required'),
        ('paid', 'Paid'),
        ('unpaid', 'Unpaid')
    ]
    CHECKOUT_STATUS_CHOICES = [
        ('complete', 'Complete'),
        ('expired', 'Expired'),
        ('open', 'Open')
    ]
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer = models.ForeignKey(Account, to_field='stripe_customer_id', on_delete=models.CASCADE,related_name='checkouts', null=True)
    mode = models.CharField(max_length=255, choices=CHECKOUT_MODE_CHOICES, default='payment')
    payment_status = models.CharField(max_length=255, choices=CHECKOUT_PAYMENT_STATUS_CHOICES, default='unpaid')
    status = models.CharField(max_length=255, choices=CHECKOUT_STATUS_CHOICES, null=True)
    stripe_checkout_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    success_url = models.CharField(max_length=255)
    return_url = models.CharField(max_length=255)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def add_item(self, price_id=None, plan_id=None, quantity=1):
        """
        Add a CheckoutLineItem to the checkout or update its quantity if it already exists.
        Either price_id or plan_id must be provided.
        """
        from ...models import Price, Plan  # Avoid circular imports

        if not price_id and not plan_id:
            raise ValueError("Either 'price_id' or 'plan_id' must be provided.")

        # Retrieve the price or plan
        if price_id:
            price = Price.objects.get(stripe_price_id=price_id)
        else:
            price = None

        if plan_id:
            plan = Plan.objects.get(stripe_plan_id=plan_id)
        else:
            plan = None

        # Check if the item already exists based on provided parameters
        checkout_item, created = self.checkout_line_items.get_or_create(
            price=price,  # Use the non-None value
            plan=plan,
            defaults={'quantity': quantity}
        )

        if not created:
            # Update the quantity if the item already exists
            checkout_item.quantity += quantity
            checkout_item.save()

        return checkout_item


    def update_item_quantity(self, price_id, quantity):
        """
        Update the quantity of a specific CheckoutLineItem in the checkout.
        """
        checkout_item = self.checkout_line_items.filter(price__stripe_price_id=price_id).first()
        if not checkout_item:
            raise ValueError("checkout item does not exist.")

        if quantity > 0:
            checkout_item.quantity = quantity
            checkout_item.save()
        else:
            checkout_item.delete()

        return checkout_item

    def remove_item(self, price_id):
        """
        Remove a CheckoutLineItem from the checkout.
        """
        checkout_item = self.checkout_line_items.filter(price__stripe_price_id=price_id).first()
        if checkout_item:
            checkout_item.delete()
        else:
            raise ValueError("checkout item does not exist.")

    def clear_items(self):
        """
        Remove all CheckoutLineItems from the checkout.
        """
        self.checkout_line_items.all().delete()

    def get_items(self):
        """
        Retrieve all CheckoutLineItems for this checkout.
        """
        return self.checkout_line_items.all()


    def create_stripe_session(self):
        """
        Create a Stripe Checkout Session for this checkout instance.
        """
        try:
            # Collect line items for the checkout session
            line_items = []
            for item in self.checkout_line_items.all():
                if item.price:  # If a price is associated
                    line_items.append({
                        "price": item.price.stripe_price_id,
                        "quantity": item.quantity,
                    })
                elif item.plan:  # If a plan is associated
                    line_items.append({
                        "price": item.plan.stripe_plan_id,
                        "quantity": item.quantity,
                    })
            print(f"line_items: ${line_items}")

            # Create the Stripe Checkout session
            session = stripe.checkout.Session.create(
                payment_method_types=["card"],
                mode=self.mode,  # Mode can be 'payment', 'setup', or 'subscription'
                line_items=line_items,
                success_url=self.success_url,
                cancel_url=self.return_url,
                customer=self.customer.stripe_customer_id if self.customer else None,
                currency="usd",  # Ensure Euro handling
            )

            # Save the session ID and update status
            self.stripe_checkout_id = session.id
            self.status = "open"
            self.save()

            return session.url  # Return the Stripe Checkout session URL

        except Exception as e:
            raise Exception(f"Error creating Stripe Checkout Session: {e}")
        

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_checkout"

class CheckoutLineItem(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    checkout = models.ForeignKey(Checkout, related_name='checkout_line_items', on_delete=models.CASCADE)
    price = models.ForeignKey(
        Price, 
        to_field='stripe_price_id', 
        on_delete=models.CASCADE, 
        related_name='checkout_line_items',
        null=True
    )
    plan = models.ForeignKey(
        Plan, 
        to_field='stripe_plan_id', 
        on_delete=models.CASCADE, 
        related_name='checkout_line_items',
        null=True
    )
    quantity = models.PositiveIntegerField(default=1)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)


    def update_quantity(self, quantity):
        """
        Update the quantity of this checkout item.
        """
        if quantity > 0:
            self.quantity = quantity
            self.save()
        else:
            self.delete()

    def remove(self):
        """
        Remove this checkout item from the checkout.
        """
        self.delete()

    # Meta Class
    class Meta:
        db_table = "pages_checkout_line_item"


File: pages/classes/checkout/form.py
----------------------------------------



File: pages/classes/checkout/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from ...models import Checkout, CheckoutLineItem, Account, Cart, Subscription, Plan, Price
from ...config.config import stripe
def handle_response(message, is_error=False, status_code=200):
    return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
class CheckoutView(APIView):

    def post(self, request):
        try:
            account = request.user
            if not account.is_authenticated:
                return handle_response("User is not authenticated.", is_error=True, status_code=401)

            # Check the request path
            if request.path == '/checkout/subscribe':
                return self.handle_subscription(request, account)
            elif request.path == '/checkout/upgrade':
                return self.handle_upgrade(request, account)
            else:
                return self.handle_cart_checkout(request, account)
        except Exception as e:
            return handle_response(f"Failed to process request: {str(e)}", is_error=True, status_code=500)

    def handle_subscription(self, request, account):
        try:
            # Check if the user already has an active subscription
            active_subscription = Subscription.objects.filter(
                customer=account,
                status__in=['active', 'trialing']
            ).first()
            if active_subscription:
                return handle_response(
                    "You already have an active subscription. Please wait until it ends to subscribe to a new plan.",
                    is_error=True,
                    status_code=400
                )

            # Retrieve plan_id or price_id from the request
            plan_id = request.data.get('plan_id')
            price_id = request.data.get('price_id')
            print(f"Plan ID: {plan_id}, Price ID: {price_id}")

            if not plan_id and not price_id:
                return handle_response("Either Plan ID or Price ID is required.", is_error=True, status_code=400)

            # Create a new Checkout instance
            checkout = Checkout.objects.create(
                success_url=request.build_absolute_uri('/checkout/success/'),
                return_url=request.build_absolute_uri('/checkout/failure/'),
                mode='subscription',
                customer=account
            )

            # Add the item to the Checkout
            if plan_id:
                # Check if the plan_id is actually a price_id
                try:
                    plan = Plan.objects.get(stripe_plan_id=plan_id)
                    checkout.add_item(plan_id=plan.stripe_plan_id, quantity=1)
                except Plan.DoesNotExist:
                    # If no Plan is found, try to find a Price
                    price = get_object_or_404(Price, stripe_price_id=plan_id)
                    checkout.add_item(price_id=price.stripe_price_id, quantity=1)
            elif price_id:
                price = get_object_or_404(Price, stripe_price_id=price_id)
                checkout.add_item(price_id=price.stripe_price_id, quantity=1)

            # Create or update the Stripe checkout
            checkout.create_stripe_session()

            # Redirect user to the checkout
            stripe_checkout_url = stripe.checkout.Session.retrieve(checkout.stripe_checkout_id)['url']
            return redirect(stripe_checkout_url)

        except Exception as e:
            return handle_response(f"Failed to handle subscription: {str(e)}", is_error=True, status_code=500)


    def handle_upgrade(self, request, account):
        try:
            new_plan_id = request.data.get('plan_id')
            if not new_plan_id:
                return handle_response("Plan ID is required for upgrade.", is_error=True, status_code=400)

            # Check for an active subscription
            active_subscription = Subscription.objects.filter(
                customer=account,
                status__in=['active', 'trialing']
            ).first()
            if not active_subscription:
                return handle_response("No active subscription found to upgrade.", is_error=True, status_code=400)

            # Retrieve the new plan
            new_plan = get_object_or_404(Plan, stripe_plan_id=new_plan_id)

            # Update the Stripe subscription
            stripe.Subscription.modify(
                active_subscription.stripe_subscription_id,
                items=[{
                    "id": active_subscription.subscription_items.first().stripe_subscription_item_id,
                    "price": new_plan.stripe_plan_id
                }],
                proration_behavior='create_prorations'
            )

            # Update the subscription in your database
            active_subscription.status = 'active'
            active_subscription.save()
            return handle_response("Subscription upgraded successfully.", is_error=False, status_code=200)

        except Exception as e:
            return handle_response(f"Failed to handle upgrade: {str(e)}", is_error=True, status_code=500)

    def handle_cart_checkout(self, request, account):
        try:
            # Fetch the user's cart
            cart = get_object_or_404(Cart, customer=account)
            cart_items = cart.cart_items.all()
            if not cart_items:
                return handle_response("Cart is empty.", is_error=True, status_code=400)

            # Create a new checkout instance
            checkout = Checkout.objects.create(
                success_url=request.build_absolute_uri('/checkout/success/'),
                return_url=request.build_absolute_uri('/checkout/failure/'),
                mode='payment',
                customer=account
            )

            # Add items from the cart to the checkout
            for cart_item in cart_items:
                price = cart_item.product.prices.first()
                if price:
                    checkout.add_item(
                        price_id=price.stripe_price_id,
                        quantity=cart_item.quantity
                    )

            # Create or update the Stripe checkout session
            checkout.create_stripe_session()

            # Clear the cart after successful Stripe session creation
            cart.cart_items.all().delete()

            # Redirect the user to the Stripe checkout URL
            stripe_checkout_url = stripe.checkout.Session.retrieve(checkout.stripe_checkout_id)['url']
            return redirect(stripe_checkout_url)

        except Exception as e:
            return handle_response(f"Failed to handle cart checkout: {str(e)}", is_error=True, status_code=500)
    
    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/checkout/admin.py
----------------------------------------



File: pages/classes/checkout/serializer.py
----------------------------------------



File: pages/classes/subscription/signal.py
----------------------------------------



File: pages/classes/subscription/__init__.py
----------------------------------------



File: pages/classes/subscription/model.py
----------------------------------------
import uuid, secrets
from django.utils.timezone import now, timedelta
from django.db import models
from ...models import Account, Price, Plan
class Subscription(models.Model):
    SUBSCRIPTION_STATUS_CHOICES = [
        ('incomplete', 'incomplete'),
        ('incomplete_expired', 'incomplete_expired'),
        ('trialing', 'trialing'),
        ('active', 'active'),
        ('past_due', 'past_due'),
        ('canceled', 'canceled'),
        ('unpaid', 'unpaid'),
        ('paused', 'paused'),
    ]
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer = models.ForeignKey(
        Account, to_field='stripe_customer_id', 
        on_delete=models.CASCADE, 
        related_name='subscriptions'
    )
    status = models.CharField(max_length=255, choices=SUBSCRIPTION_STATUS_CHOICES, default=None)
    stripe_subscription_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_subscription"


class SubscriptionItem(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    subscription = models.ForeignKey(
        Subscription, 
        on_delete=models.CASCADE, 
        related_name='subscription_items'
    )
    price = models.ForeignKey(
        Price, 
        to_field='stripe_price_id', 
        on_delete=models.CASCADE, 
        related_name='subscription_items',
        null=True
    )
    plan = models.ForeignKey(
        Plan, 
        to_field='stripe_plan_id', 
        on_delete=models.CASCADE, 
        related_name='subscription_items',
        null=True
    )
    quantity = models.PositiveIntegerField(default=1)
    stripe_subscription_item_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_subscription_item"


File: pages/classes/subscription/form.py
----------------------------------------



File: pages/classes/subscription/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.exceptions import AuthenticationFailed
from ...models import Account, Subscription
from ...views import authenticate_user

class SubscriptionView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'subscription/subscription.html')
        except Exception as e:
            message = f"'GET' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class SubscriptionsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Authenticate the user
            account = authenticate_user(request)
            user = request.user
            account = Account.objects.filter(id=user.id).first()

            # Fetch all subscriptions (active and inactive) for the user
            subscriptions = Subscription.objects.filter(
                customer=account.stripe_customer_id
            ).select_related('customer').prefetch_related('subscription_items__price', 'subscription_items__plan')

            return render(request, 'subscription/subscriptions.html', {"subscriptions": subscriptions})

        except AuthenticationFailed:
            return redirect('login')
        except Exception as e:
            message = f"'GET' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/subscription/admin.py
----------------------------------------



File: pages/classes/subscription/serializer.py
----------------------------------------



File: pages/classes/system/signal.py
----------------------------------------



File: pages/classes/system/__init__.py
----------------------------------------



File: pages/classes/system/model.py
----------------------------------------



File: pages/classes/system/form.py
----------------------------------------



File: pages/classes/system/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from ...models import Plan, Price

class IndexView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/index.html')
        except Exception as e:
            message = f"'GET' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class Error404View(APIView):
    def post(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/404.html')
        except Exception as e:
            message = f"'GET' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')



class ResponseView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def get(self, request):
        try:
            # Handle GET requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def put(self, request):
        try:
            # Handle PUT requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def patch(self, request):
        try:
            # Handle PATCH requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def delete(self, request):
        try:
            # Handle DELETE requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)


class AboutView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/about.html')
        except Exception as e:
            message = f"'GET' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class ContactView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/contact.html')
        except Exception as e:
            message = f"'GET' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        


class SupportView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/support.html')
        except Exception as e:
            message = f"'GET' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class TermsOfServiceView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/terms-of-service.html')
        except Exception as e:
            message = f"'GET' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class PrivacyPolicyView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/privacy-policy.html')
        except Exception as e:
            message = f"'GET' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class PlansAndPricingView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Filter plans and prices to show only those with a recurring interval
            monthly_plans = Plan.objects.filter(interval='month')
            yearly_plans = Plan.objects.filter(interval='year')
            monthly_prices = Price.objects.filter(recurring__interval='month')
            yearly_prices = Price.objects.filter(recurring__interval='year')

            # Combine plans and prices and add a unified 'stripe_id' key
            monthly_items = [
                {'product': item.product, 'amount': item.amount, 'stripe_id': item.stripe_plan_id}
                for item in monthly_plans
            ] + [
                {'product': item.product, 'amount': item.unit_amount, 'stripe_id': item.stripe_price_id}
                for item in monthly_prices
            ]

            yearly_items = [
                {'product': item.product, 'amount': item.amount, 'stripe_id': item.stripe_plan_id}
                for item in yearly_plans
            ] + [
                {'product': item.product, 'amount': item.unit_amount, 'stripe_id': item.stripe_price_id}
                for item in yearly_prices
            ]

            return render(request, 'system/plans-and-pricing.html', {
                'monthly_items': monthly_items,
                'yearly_items': yearly_items
            })
        except Exception as e:
            message = f"'GET' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class ResourceView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/resources.html')
        except Exception as e:
            message = f"'GET' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class ResourcesView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/resources.html')
        except Exception as e:
            message = f"'GET' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')



class UserGuideView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/user-guides.html')
        except Exception as e:
            message = f"'GET' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    
class UserGuidesView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/user-guides.html')
        except Exception as e:
            message = f"'GET' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
class TutorialView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/tutorials.html')
        except Exception as e:
            message = f"'GET' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
class TutorialsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/tutorials.html')
        except Exception as e:
            message = f"'GET' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')



    


class CommunityForumView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/community-forum.html')
        except Exception as e:
            message = f"'GET' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        

class SupportTicketView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/support-ticket.html')
        except Exception as e:
            message = f"'GET' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class WhitePaperView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/whitepaper.html')
        except Exception as e:
            message = f"'GET' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class FAQsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/faqs.html')
        except Exception as e:
            message = f"'GET' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/system/admin.py
----------------------------------------



File: pages/classes/system/serializer.py
----------------------------------------



File: pages/classes/price/signal.py
----------------------------------------



File: pages/classes/price/__init__.py
----------------------------------------



File: pages/classes/price/model.py
----------------------------------------
import uuid
from django.db import models
from django.utils.timezone import now
from ...config.config import stripe
from ...models import Product

class Price(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    currency = models.CharField(max_length=3)
    recurring = models.JSONField(max_length=1024, null=True)
    product = models.ForeignKey(Product, to_field='stripe_product_id', on_delete=models.CASCADE, related_name='prices')
    unit_amount = models.DecimalField(default=0.00, max_digits=10, decimal_places=2)
    stripe_price_id = models.CharField(max_length=255, blank=True, unique=True, null=True)  # Stripe product ID
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def create_stripe_price(self):
        """Creates a Stripe price and stores the price ID."""
        try:
            # Convert unit_amount from dollars to cents
            if isinstance(self.unit_amount, str):
                self.unit_amount = float(self.unit_amount)  # Ensure the input is a float

            unit_amount_cents = int(self.unit_amount * 100)  # Convert dollars to cents

            # Validate the unit_amount_cents
            if not (1 <= unit_amount_cents <= 100000000):  # Stripe max unit amount is $1,000,000 (in cents)
                raise ValueError(f"Invalid unit_amount: {self.unit_amount}. Must be between $0.01 and $1,000,000.00.")

            # Create a new Stripe price
            price = stripe.Price.create(
                unit_amount=unit_amount_cents,  # Stripe expects the amount in cents
                currency=self.currency,
                recurring=self.recurring if self.recurring else None,
                product=self.product.stripe_product_id,
            )
            # Store the Stripe price ID in the model
            self.stripe_price_id = price.id
            self.save()
            return price
        except stripe.error.StripeError as e:
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to create Stripe price: {e}")
        except Exception as e:
            print(f"Error: {e}")
            raise Exception(f"Failed to create Stripe price: {e}")



    def update_stripe_price(self, **kwargs):
        """Updates the Stripe price with the provided details."""
        try:
            # Update the Stripe price
            price = stripe.Price.modify(
                self.stripe_price_id,
                **kwargs
            )
            # Optionally update local fields if needed
            if 'unit_amount' in kwargs:
                self.unit_amount = kwargs['unit_amount'] / 100  # Convert back from cents
            if 'currency' in kwargs:
                self.currency = kwargs['currency']
            self.save()
            return price
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to update Stripe price: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to update Stripe price: {e}")

    def delete_stripe_price(self):
        """Deletes the Stripe price associated with this price."""
        try:
            # Archive the Stripe price (Stripe does not allow full deletion of prices)
            stripe.Price.modify(
                self.stripe_price_id,
                active=False
            )
            # Optionally, mark the local price as deleted
            self.deleted = now()
            self.save()
            print("Stripe price archived successfully.")
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to delete Stripe price: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to delete Stripe price: {e}")

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_price"


File: pages/classes/price/form.py
----------------------------------------



File: pages/classes/price/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response

class PriceView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class PricesView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/price/admin.py
----------------------------------------



File: pages/classes/price/serializer.py
----------------------------------------



File: pages/classes/setup_intent/signal.py
----------------------------------------



File: pages/classes/setup_intent/__init__.py
----------------------------------------



File: pages/classes/setup_intent/model.py
----------------------------------------



File: pages/classes/setup_intent/form.py
----------------------------------------



File: pages/classes/setup_intent/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response

class SetupIntentView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/setup_intent/admin.py
----------------------------------------



File: pages/classes/setup_intent/serializer.py
----------------------------------------



File: pages/classes/cart/signal.py
----------------------------------------



File: pages/classes/cart/__init__.py
----------------------------------------



File: pages/classes/cart/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from django.utils.timezone import now
from django.contrib.auth.models import AbstractUser
from django.core.mail import send_mail
from ...config.config import stripe
from system.settings import DEFAULT_FROM_EMAIL, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD
from ...models import Account, Product
from django.conf import settings

class Cart(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer = models.ForeignKey(Account, to_field='stripe_customer_id',    on_delete=models.CASCADE, null=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def add_item(self, product_id, quantity=1):
        """
        Add a product to the cart or update its quantity if it already exists.
        """
        product = Product.objects.get(id=product_id)

        # Check if the product is already in the cart
        cart_item, created = CartItem.objects.get_or_create(
            cart=self,
            product=product,
            defaults={'quantity': quantity}
        )

        if not created:
            # Update the quantity if the item already exists
            cart_item.quantity += quantity
            cart_item.save()

        return cart_item

    def update_item_quantity(self, product_id, quantity):
        """
        Update the quantity of a specific product in the cart.
        """
        cart_item = self.cart_items.filter(product__id=product_id).first()
        if not cart_item:
            raise ValueError("Cart item does not exist.")

        if quantity > 0:
            cart_item.quantity = quantity
            cart_item.save()
        else:
            cart_item.delete()

        return cart_item

    def remove_item(self, product_id):
        """
        Remove a product from the cart.
        """
        cart_item = self.cart_items.filter(product__id=product_id).first()
        if cart_item:
            cart_item.delete()
        else:
            raise ValueError("Cart item does not exist.")

    def clear_cart(self):
        """
        Remove all items from the cart.
        """
        self.cart_items.all().delete()

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_cart"

class CartItem(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    cart = models.ForeignKey(
        Cart, 
        on_delete=models.CASCADE, 
        related_name='cart_items'
    )
    product = models.ForeignKey(Product, to_field='stripe_product_id', on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def update_quantity(self, quantity):
        """
        Update the quantity of this cart item.
        """
        if quantity > 0:
            self.quantity = quantity
            self.save()
        else:
            self.delete()

    def remove(self):
        """
        Remove this item from the cart.
        """
        self.delete()

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_cart_item"


File: pages/classes/cart/form.py
----------------------------------------



File: pages/classes/cart/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from django.shortcuts import redirect, get_object_or_404
from ...models import Product, Cart, CartItem

class CartView(APIView):
    def post(self, request, product_id):
        try:
            # Ensure the user is authenticated (otherwise, return a relevant error)
            if not request.user.is_authenticated:
                return redirect('login')  # Adjust this as per your login view
            account = request.user
            product = get_object_or_404(Product, id=product_id)  # Get the product by ID

            # Check if the user already has a Cart (either create a new one or fetch the existing one)
            cart, created = Cart.objects.get_or_create(customer=account)

            # Check if the product is already in the Cart (check if the CartItem exists)
            cart_item, item_created = CartItem.objects.get_or_create(cart=cart, product=product)

            # If the product is already in the cart, increase its quantity
            if not item_created:
                cart_item.quantity += 1
                cart_item.save()

            # Redirect to the cart page or show a success message
            return redirect('cart')  # Update with your actual cart page URL name

        except Exception as e:
            # Handle any errors gracefully
            message = f"'POST' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def get(self, request):
        try:
            # Ensure the user is authenticated
            if not request.user.is_authenticated:
                return redirect('login')  # Redirect to login if the user is not authenticated

            # Fetch the Cart for the user
            account = request.user  # Assuming the user object is directly linked to the account
            cart = get_object_or_404(Cart, customer=account)

            # Get all CartItems in the user's cart
            cart_items = CartItem.objects.filter(cart=cart)

            # Pass the cart items to the template
            context = {
                "cart_items": cart_items,
            }
            return render(request, 'cart/cart.html', context)
        except Cart.DoesNotExist:
            # If the cart doesn't exist, render the page with an empty cart message
            return render(request, 'cart/cart.html', {"cart_items": []})
        except Exception as e:
            # Handle errors gracefully
            message = f"'GET' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/cart/admin.py
----------------------------------------



File: pages/classes/cart/serializer.py
----------------------------------------



File: pages/classes/api/signal.py
----------------------------------------



File: pages/classes/api/__init__.py
----------------------------------------



File: pages/classes/api/model.py
----------------------------------------
import uuid, secrets
from django.utils.timezone import now, timedelta
from django.db import models
from ...models import Account
class ApiKey(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
    )
    account = models.ForeignKey(Account, on_delete=models.CASCADE, related_name="api_keys")
    key = models.CharField(max_length=50, unique=True, default=secrets.token_urlsafe)
    active = models.BooleanField(default=True)
    revealed = models.BooleanField(default=False)
    primary = models.BooleanField(default=False)
    credit_limit = models.PositiveIntegerField(default=1000)
    credits_used = models.PositiveIntegerField(default=0)
    reset_date = models.DateTimeField(default=now)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_api_key"



File: pages/classes/api/form.py
----------------------------------------



File: pages/classes/api/view.py
----------------------------------------
import uuid, secrets
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from ...models import ApiKey
class ApiView(APIView):
    def post(self, request):
        try:
            # Get the authenticated user's account
            account = request.user

            # Generate a new API key
            new_api_key = secrets.token_urlsafe(32)  # Generate a secure random API key

            # Create and save the new API key
            api_key = ApiKey.objects.create(
                account=account,
                key=new_api_key,
                primary=False,  # Set as non-primary by default
                credit_limit=1000,  # Example credit limit
                credits_used=0
            )

            # Success response
            message = "API Key created successfully."
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/api/admin.py
----------------------------------------



File: pages/classes/api/serializer.py
----------------------------------------



File: pages/classes/log/signal.py
----------------------------------------



File: pages/classes/log/__init__.py
----------------------------------------



File: pages/classes/log/model.py
----------------------------------------



File: pages/classes/log/form.py
----------------------------------------



File: pages/classes/log/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response

class LogView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/log/admin.py
----------------------------------------



File: pages/classes/log/serializer.py
----------------------------------------



File: pages/classes/account/signal.py
----------------------------------------



File: pages/classes/account/__init__.py
----------------------------------------



File: pages/classes/account/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from django.utils.timezone import now
from django.contrib.auth.models import AbstractUser
from django.core.mail import send_mail
from ...config.config import stripe
from system.settings import DEFAULT_FROM_EMAIL, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD


class Account(AbstractUser):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
    )
    
    username = models.CharField(max_length=255, unique=True, null=True, blank=True)
    name = models.CharField(max_length=255)
    description = models.CharField(max_length=255, null=True, blank=True)
    email = models.CharField(max_length=255, unique=True)
    email_confirmation_secret = models.CharField(max_length=16, blank=True, null=True)
    email_confirmed = models.BooleanField(default=False)
    mfa_secret = models.CharField(max_length=16, blank=True, null=True)
    mfa_enabled = models.BooleanField(default=False)
    mfa_confirmed = models.BooleanField(default=False)
    password = models.CharField(max_length=255)
    stripe_customer_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def generate_email_confirmation_secret(self):
        """Generates an 8-digit numeric code for email confirmation."""
        self.email_confirmation_secret = '{:08d}'.format(random.randint(0, 99999999))
        self.save()

    def generate_mfa_secret_secret(self):
        """Generates mfa secret"""
        self.mfa_secret = pyotp.random_base32()
        self.save()

    def validate_email_confirmed(self):
        """Marks the email as confirmed."""
        self.email_confirmed = True
        self.save()

    def validate_mfa_confirmed(self):
        """Marks the mfa as confirmed."""
        self.mfa_confirmed = True
        self.save()

    def validate_mfa_unconfirmed(self):
        """Marks the mfa as confirmed."""
        self.mfa_confirmed = False
        self.save()

    def send_confirmation_email(self):
        """Send the confirmation email to the user."""
        user_name = self.name or self.username or "User"
        try:
            send_mail(
                subject=f"Please confirm your email, {user_name}",
                message=f"Your confirmation secret is: {self.email_confirmation_secret}",
                from_email=DEFAULT_FROM_EMAIL,
                recipient_list=[self.email],
                fail_silently=False,
            )
        except Exception as e:
            print(f"Failed to send email: {e}")
            raise Exception(f"Failed to send email: {e}")

    def create_stripe_customer(self):
        """Creates a Stripe customer and stores the customer ID."""
        try:
            # Create a new Stripe customer
            customer = stripe.Customer.create(
                email=self.email,
                name=self.name,
                description=f"Customer for {self.email}"
            )
            # Store the Stripe customer ID in the account
            self.stripe_customer_id = customer.id
            self.save()
            return customer
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to create Stripe customer: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to create Stripe customer: {e}")

    def update_stripe_customer(self, **kwargs):
        """Updates the Stripe customer with the provided details."""
        if not self.stripe_customer_id:
            raise Exception("Stripe customer ID not set for this account.")

        try:
            # Update the Stripe customer
            customer = stripe.Customer.modify(
                self.stripe_customer_id,
                **kwargs
            )
            return customer
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to update Stripe customer: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to update Stripe customer: {e}")
        

    def delete_stripe_customer(self):
        """Deletes the Stripe customer associated with this account."""
        if not self.stripe_customer_id:
            raise Exception("Stripe customer ID not set for this account.")

        try:
            # Delete the Stripe customer
            stripe.Customer.delete(self.stripe_customer_id)

            # Optionally, clear the stripe_customer_id field
            self.stripe_customer_id = None
            self.save()

            print("Stripe customer deleted successfully.")
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to delete Stripe customer: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to delete Stripe customer: {e}")


    def __str__(self):
        return self.username or self.email

    # Meta Class
    class Meta:
        db_table = "pages_account"


File: pages/classes/account/form.py
----------------------------------------



File: pages/classes/account/view.py
----------------------------------------
import uuid, pyotp, random, qrcode, io, base64
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from ...models import ApiKey, Subscription

class AccountView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Get the authenticated user's account
            account = request.user

            # Check MFA status
            if not account.mfa_confirmed and account.mfa_enabled:
                return redirect("verify-mfa")
            if(account.mfa_secret == None):
                account.generate_mfa_secret_secret()

            # Generate MFA QR code if needed
            # qr_code_data_uri = None
            # if not account.mfa_enabled and account.mfa_secret is None:
            #     account.generate_mfa_secret_secret()
            #     otp_uri = pyotp.totp.TOTP(account.mfa_secret).provisioning_uri(
            #         name=account.email,
            #         issuer_name="Clean SMRs"
            #     )
            #     qr = qrcode.make(otp_uri)
            #     buffer = io.BytesIO()
            #     qr.save(buffer, format="PNG")
            #     buffer.seek(0)
            #     qr_code = base64.b64encode(buffer.getvalue()).decode("utf-8")
            #     qr_code_data_uri = f"data:image/png;base64,{qr_code}"
            otp_uri = pyotp.totp.TOTP(account.mfa_secret).provisioning_uri(
                name=account.email,
                issuer_name="Clean SMRs"
            )
            qr = qrcode.make(otp_uri)
            buffer = io.BytesIO()
            qr.save(buffer, format="PNG")

            buffer.seek(0)
            qr_code = base64.b64encode(buffer.getvalue()).decode("utf-8")

            qr_code_data_uri = f"data:image/png;base64,{qr_code}"

            # Fetch API keys and subscriptions
            api_keys = ApiKey.objects.filter(account=account)
            subscriptions = Subscription.objects.filter(
                customer=account.stripe_customer_id, deleted__isnull=True, status='active'
            )

            # Get the active subscription plan
            current_subscription = subscriptions.first() if subscriptions.exists() else None
            current_plan = None
            if current_subscription:
                subscription_item = current_subscription.subscription_items.first()
                if subscription_item:
                    current_plan = {
                        "name": subscription_item.price.product.name,
                        "amount": subscription_item.price.unit_amount,
                        "interval": subscription_item.price.recurring.get("interval", "N/A"),
                    }

            # Render the account page with user data
            return render(request, 'account/account.html', {
                'account': account,
                'api_keys': api_keys,
                'current_plan': current_plan,
                'current_subscription': current_subscription,
                'token': request.COOKIES.get('jwt'),
                'qrcode': qr_code_data_uri,
            })
        except Exception as e:
            message = f"'GET' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/account/admin.py
----------------------------------------



File: pages/classes/account/serializer.py
----------------------------------------



File: pages/classes/authentication/signal.py
----------------------------------------



File: pages/classes/authentication/__init__.py
----------------------------------------



File: pages/classes/authentication/model.py
----------------------------------------



File: pages/classes/authentication/form.py
----------------------------------------



File: pages/classes/authentication/view.py
----------------------------------------
import jwt, pyotp, datetime
from ...models import Account
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.hashers import make_password
from django.core.mail import send_mail
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.exceptions import AuthenticationFailed
from rest_framework.authentication import BaseAuthentication

def authenticate_user(request):
    """Authenticate the user using JWT and return the account."""
    jwt_auth = JWTAuthentication()
    account, _ = jwt_auth.authenticate(request)
    if account is None:
        raise AuthenticationFailed('Authentication failed')
    return account

def check_mfa(account):
    if not account.mfa_confirmed and account.mfa_enabled:
            return redirect("verify-mfa")

class JWTAuthentication(BaseAuthentication):
    def authenticate(self, request):
        auth_header = request.headers.get('Authorization')
        token = None

        if auth_header:
            try:
                token_type, token = auth_header.split()
                if token_type.lower() != 'bearer':
                    raise AuthenticationFailed('Invalid token type')
            except ValueError:
                raise AuthenticationFailed('Invalid token header')
        else:
            token = request.COOKIES.get('jwt')

        if not token:
            return None
        try:
            payload = jwt.decode(token, 'secret-key', algorithms=['HS256'])
        except jwt.ExpiredSignatureError:
            raise AuthenticationFailed('Token has expired')
        except jwt.InvalidTokenError:
            raise AuthenticationFailed('Invalid token')

        account = Account.objects.filter(id=payload['id']).first()
        if account is None:
            raise AuthenticationFailed('User not found')

        return (account, None)

class ConfirmEmailView(APIView):
    def post(self, request):
        try:
            # Get the authenticated user's account
            account = request.user

            # Check if the request is to resend the confirmation code
            if request.data.get('resend') == 'true':
                # Generate a new confirmation secret and send email
                account.generate_email_confirmation_secret()
                account.send_confirmation_email()

                message = "Confirmation code resent successfully."
                is_error = False
                status_code = 200
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Handle email confirmation
            confirmation_code = request.data.get('confirmation_secret')

            # Validate input
            if not confirmation_code:
                message = "Confirmation code is required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Validate confirmation code
            if account.email_confirmation_secret != confirmation_code:
                message = "Invalid confirmation code."
                is_error = True
                status_code = 401
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Mark email as confirmed
            account.validate_email_confirmed()

            # Success response
            message = "Email confirmed successfully."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/confirm-email.html')
        except Exception as e:
            message = f"'GET' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class VerifyMfaView(APIView):
    def post(self, request):
        try:
            # Extract account ID and OTP from the request data
            account_id = request.data.get("account_id")
            otp = request.data.get("otp")

            if not account_id or not otp:
                message = "Account ID and OTP are required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Retrieve the account using the account_id
            account = Account.objects.get(id=account_id)

            # Verify the OTP using the account's MFA secret
            totp = pyotp.TOTP(account.mfa_secret)
            if totp.verify(otp):
                # If OTP is correct, mark MFA as confirmed
                account.validate_mfa_confirmed()
                message = "MFA verification successful."
                is_error = False
                status_code = 200
            else:
                # If OTP is incorrect, return an error
                message = "Invalid OTP. Please try again."
                is_error = True
                status_code = 400

        except Account.DoesNotExist:
            message = "Account not found."
            is_error = True
            status_code = 404
        except Exception as e:
            message = f"'POST' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500

        return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    
    def get(self, request):
        try:
            account = request.user
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/verify-mfa.html', {"account_id": account.id})
        except Exception as e:
            message = f"'GET' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class EnableMfaView(APIView):
    def post(self, request):
        try:
            # Get the authenticated user's account
            account = request.user

            # Generate a new MFA secret if it doesn't exist
            if not account.mfa_secret:
                account.generate_mfa_secret_secret()

            # Get the MFA code from the request
            mfa_code = request.data.get('otp')

            # Validate input
            if not mfa_code:
                message = "MFA code is required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Verify the MFA code
            totp = pyotp.TOTP(account.mfa_secret)
            if not totp.verify(mfa_code):
                message = "Invalid MFA code."
                is_error = True
                status_code = 401
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Enable MFA for the account
            account.mfa_enabled = True
            account.save()

            # Success response
            message = "MFA enabled successfully."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def get(self, request):
        try:
            account = request.user
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/enable-mfa.html', {'account':account})
        except Exception as e:
            message = f"'GET' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class DisableMfaView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class LoginView(APIView):
    def post(self, request):
        try:
            # Extract email and password from request
            email = request.data.get('email')
            password = request.data.get('password')

            # Validate input
            if not email or not password:
                message = "Email and password are required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Check if account exists
            account = Account.objects.filter(email=email).first()
            if not account:
                message = "Account not found."
                is_error = True
                status_code = 404
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Authenticate user
            user = authenticate(request, username=account.username, password=password)
            if not user:
                message = "Invalid credentials."
                is_error = True
                status_code = 401
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Log the user in
            login(request, user)

            # Create JWT token
            try:
                payload = {
                    'id': str(account.id),
                    'username': str(account.username),
                    'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=60),
                    'iat': datetime.datetime.utcnow()
                }
                token = jwt.encode(payload, 'secret-key', algorithm='HS256')
            except Exception as e:
                message = f"Failed to create JWT: {e}"
                is_error = True
                status_code = 500
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Set token in response cookie
            response = redirect('index')  # Redirect to homepage (index.html)
            response.set_cookie(key='jwt', value=token, httponly=True)

            return response

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/login.html')
        except Exception as e:
            message = f"'GET' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class RegisterView(APIView):
    def post(self, request):
        try:
            # Extract data from request
            email = request.data.get('email')
            password = request.data.get('password')
            username = request.data.get('username')
            name = request.data.get('name')

            # Validate input
            if not email or not password or not username:
                message = "Email, password, and username are required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Check if email or username already exists
            if Account.objects.filter(email=email).exists():
                message = "Email is already in use."
                is_error = True
                status_code = 409
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            if Account.objects.filter(username=username).exists():
                message = "Username is already in use."
                is_error = True
                status_code = 409
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Create new account
            account = Account(
                email=email,
                name=name,
                username=username,
                password=make_password(password)  # Hash the password
            )
            account.save()
            account.create_stripe_customer()

            # Success response
            message = "Account created successfully."
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/register.html')
        except Exception as e:
            message = f"'GET' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    

class LogoutView(APIView):
    def post(self, request):
        try:
            # Log out the user
            logout(request)

            # Clear the JWT token from cookies
            response = redirect('index')  # Redirect to homepage (index.html)
            response.delete_cookie('jwt')

            # Success response
            message = "Successfully logged out."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/authentication/admin.py
----------------------------------------



File: pages/classes/authentication/serializer.py
----------------------------------------



File: pages/classes/observation/signal.py
----------------------------------------



File: pages/classes/observation/__init__.py
----------------------------------------



File: pages/classes/observation/model.py
----------------------------------------



File: pages/classes/observation/form.py
----------------------------------------



File: pages/classes/observation/view.py
----------------------------------------
import requests, os
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.exceptions import AuthenticationFailed
from ...models import ApiKey, Subscription
from django.conf import settings
from ...views import authenticate_user, check_mfa

FLASK_URL = os.getenv('FLASK_URL')
FLASK_LOCAL_HOST_URL = os.getenv('FLASK_LOCAL_HOST_URL')

if settings.DEBUG:
    FLASK_URL = FLASK_LOCAL_HOST_URL



class ObservationView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'observation/observation.html')
        except Exception as e:
            message = f"'GET' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class ObservationsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Authenticate the user
            account = authenticate_user(request)
            check_mfa(account=account)

            # Get the user's primary API key
            api_key = ApiKey.objects.filter(account=account, primary=True).first()
            if not api_key:
                message = "No Primary API key selected in your Account, please either generate a new key or select and set one"
                return render(request, 'observation/observations.html', {"observations": [], "message": message})

            # Check if the user has an active subscription
            subscription = Subscription.objects.filter(customer=account, status='active', deleted__isnull=True).first()
            if not subscription:
                message = "You need to subscribe to access this feature"
                return render(request, 'observation/observations.html', {"observations": [], "message": message})

            # Fetch observations from the external API
            url = f"{FLASK_URL}/observations"
            headers = {
                "X-API-KEY": api_key.key,
            }
            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                observations = response.json()
                return render(request, 'observation/observations.html', {"observations": observations})
            else:
                message = f"Failed to fetch observations: {response.text}"
                return render(request, 'observation/observations.html', {"observations": [], "message": message})

        except AuthenticationFailed:
            return redirect('login')
        except Exception as e:
            return render(request, 'system/response.html', {
                'message': f"'GET' Method Failed for ObservationsView: {e}",
                "is_error": True
            }, status=400)

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: pages/classes/observation/admin.py
----------------------------------------



File: pages/classes/observation/serializer.py
----------------------------------------



File: pages/validators.py
----------------------------------------



File: pages/management/commands/create_superuser_if_none.py
----------------------------------------
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model

class Command(BaseCommand):
    help = 'Create a superuser if none exists'

    def handle(self, *args, **kwargs):
        User = get_user_model()
        if not User.objects.filter(is_superuser=True).exists():
            User.objects.create_superuser(
                username='admin',
                email='admin@cleansmrs.com',
                password='123456@Aa'
            )
            self.stdout.write(self.style.SUCCESS('Superuser created.'))
        else:
            self.stdout.write(self.style.SUCCESS('Superuser already exists.'))


File: pages/__init__.py
----------------------------------------



File: pages/apps.py
----------------------------------------
from django.apps import AppConfig


class PagesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'pages'



File: pages/forms.py
----------------------------------------
from .classes.account.form import *
from .classes.authentication.form import *
from .classes.system.form import *
from .classes.product.form import *
from .classes.plan.form import *
from .classes.subscription.form import *
from .classes.cart.form import *
from .classes.checkout.form import *
from .classes.api.form import *
from .classes.order.form import *
from .classes.observation.form import *
from .classes.webhook.form import *


File: pages/admin.py
----------------------------------------
from django.contrib import admin

# Register your models here.



File: pages/utils.py
----------------------------------------



File: pages/tests.py
----------------------------------------
from django.test import TestCase

# Create your tests here.



File: pages/urls.py
----------------------------------------
from django.urls import path
from .views import *

urlpatterns = [
    path('account', AccountView.as_view(), name="account"),
    path('account/edit', AccountView.as_view(), name="account-edit"),
    # # authentication start
    path('confirm-email', ConfirmEmailView.as_view(), name="confirm-email"),
    path('verify-mfa', VerifyMfaView.as_view(), name="verify-mfa"),
    path('verify-mfa/<uuid:otp>', VerifyMfaView.as_view(), name="verify-mfa"),
    path('enable-mfa', EnableMfaView.as_view(), name="enable-mfa"),
    path('disable-mfa', DisableMfaView.as_view(), name="disable-mfa"),
    path('login', LoginView.as_view(), name="login"),
    path('logout', LogoutView.as_view(), name="logout"),
    path('register', RegisterView.as_view(), name="register"),
    # # authentication end
    # # ========================================================================== #
    # # ========================================================================== #

    # # system start
    path('', IndexView.as_view(), name="index"),
    path('about', AboutView.as_view(), name="about"),
    path('contact', ContactView.as_view(), name="contact"),
    path('contact/submit', ContactView.as_view(), name="contact-submit"),
    path('support', SupportView.as_view(), name="support"),
    path('support/submit', SupportView.as_view(), name="support-submit"),
    path('terms-of-service', TermsOfServiceView.as_view(), name="terms-of-service"),
    path('privacy-policy', PrivacyPolicyView.as_view(), name="privacy-policy"),
    path('plans-and-pricing', PlansAndPricingView.as_view(), name="plans-and-pricing"),
    path('resources', ResourcesView.as_view(), name="resources"),
    path('user-guides', UserGuidesView.as_view(), name="user-guides"),
    path('tutorials', TutorialsView.as_view(), name="tutorials"),
    path('community-forum', CommunityForumView.as_view(), name="community-forum"),
    path('support-ticket', SupportTicketView.as_view(), name="support-ticket"),
    path('submit-support-ticket', SupportTicketView.as_view(), name="submit-support-ticket"),
    path('user-guide-smr', UserGuideView.as_view(), name="user-guide-smr"),
    path('user-guide-portal', UserGuideView.as_view(), name="user-guide-portal"),
    path('tutorial-setup', TutorialView.as_view(), name="tutorial-setup"),
    path('tutorial-maintenance', TutorialView.as_view(), name="tutorial-maintenance"),
    path('whitepaper-clean-energy', WhitePaperView.as_view(), name="whitepaper-clean-energy"),
    path('whitepaper-smr-technology', WhitePaperView.as_view(), name="whitepaper-smr-technology"),
    path('faqs', FAQsView.as_view(), name="faqs"),
    # path('<path:dummy>/', Error404View.as_view(), name="Error-404"),
    # # system end
    # # ========================================================================== #
    # # ========================================================================== #
    # # product start
    # Product-related URLs
    path('products/', ProductsView.as_view(), name="products-list"),
    path('products/create/', ProductView.as_view(), name="product-create"),
    path('products/create', ProductView.as_view(), name="product-create"),
    path('products/buy-now/<uuid:product_id>/', ProductsView.as_view(), name="buy-now"),
    path('products/<uuid:product_id>/', ProductView.as_view(), name="product-detail"),
    path('products/<uuid:product_id>/update/', ProductView.as_view(), name="product-update"),
    path('products/<uuid:product_id>/update', ProductView.as_view(), name="product-update"),
    path('products/<uuid:product_id>/delete/', ProductView.as_view(), name="product-delete"),
    path('products/<uuid:product_id>/delete', ProductView.as_view(), name="product-delete"),
    # path('product', ProductView.as_view(), name="product"),
    # path('product/create', ProductView.as_view(), name="product-create"),
    # path('product/update/<uuid:product_id>', ProductView.as_view(), name="product-update"),
    # path('product/delete/<uuid:product_id>', ProductView.as_view(), name="product-delete"),
    # path('product/<uuid:product_id>', ProductView.as_view(), name="product"),
    # path('product/<uuid:product_id>/', ProductView.as_view(), name="product"),
    path('products', ProductsView.as_view(), name="products"),
    path('products/', ProductsView.as_view(), name="products"),
    # # product end
    # # ========================================================================== #
    # # ========================================================================== #
    # # subscription start
    path('subscription', SubscriptionView.as_view(), name="subscription"),
    path('subscription/create', SubscriptionView.as_view(), name="subscription-create"),
    path('subscription/cancel', SubscriptionView.as_view(), name="subscription-cancel"),
    path('subscription/<uuid:subscription_id>', SubscriptionView.as_view(), name="subscription"),
    path('subscriptions', SubscriptionsView.as_view(), name="subscriptions"),
    path('subscriptions/',SubscriptionsView.as_view(), name="subscriptions"),
    # # order end
    # # ========================================================================== #
    # # ========================================================================== #    
    # # checkout start
    path('checkout', CheckoutView.as_view(), name="checkout"),
    path('checkout/create', CheckoutView.as_view(), name="checkout-create"),
    path('checkout/subscribe', CheckoutView.as_view(), name="checkout-subscribe"),
    path('checkout/upgrade', CheckoutView.as_view(), name="checkout-upgrade"),
    path('checkout/<uuid:checkout_id>', CheckoutView.as_view(), name="checkout"),
    path('checkout/success', CheckoutView.as_view(), name="checkout-success"),
    path('checkout/success/', CheckoutView.as_view(), name="checkout-success"),
    path('checkout/failure', CheckoutView.as_view(), name="checkout-failure"),
    path('checkout/failure/', CheckoutView.as_view(), name="checkout-failure"),
    # # checkout end
    # # ========================================================================== #
    # # ========================================================================== #
    # # cart start
    path('cart', CartView.as_view(), name="cart"),
    # path('add-to-cart', CartView.as_view(), name='add-to-cart'),
    # Updated URL pattern for 'add-to-cart' to accept a product_id
    path('add-to-cart/<uuid:product_id>/', CartView.as_view(), name='add-to-cart'),
    path('remove-from-cart', CartView.as_view(), name='remove-from-cart'),
    path('update-item/<uuid:cart_item_id>/', CartView.as_view(), name='update-cart-item'),
    path('remove-item/<uuid:cart_item_id>/', CartView.as_view(), name='remove-cart-item'),# # cart end
    # # ========================================================================== #
    # # ========================================================================== #
    # # order start
    path('order', OrderView.as_view(), name="order"),
    path('order/create', OrderView.as_view(), name="order-create"),
    path('order/<uuid:order_id>', OrderView.as_view(), name="order"),
    path('orders', OrdersView.as_view(), name="orders"),
    path('orders/', OrdersView.as_view(), name="orders"),
    # # order end
    # # ========================================================================== #
    # # ========================================================================== #
    # # observation start
    path('observation', ObservationView.as_view(), name="observation"),
    path('observation/create', ObservationView.as_view(), name="observation-create"),
    path('observation/<uuid:observation_id>', ObservationView.as_view(), name="observation"),
    path('observations', ObservationsView.as_view(), name="observations"),
    path('observations/', ObservationsView.as_view(), name="observations"),
    # # order end
    # # ========================================================================== #
    # # ========================================================================== #
    # # webhook start
    path('webhook', WebhookView.as_view(), name="webhook"),
    # # webhook end
    # # ========================================================================== #
    # # ========================================================================== #
    # # api key start
    path('api-key', ApiView.as_view(), name="api-key"),
    path('api-key/validate', ApiView.as_view(), name="api-key-validate"),
    path('api-key/validate/', ApiView.as_view(), name="api-key-validate"),
    path('api-key/generate', ApiView.as_view(), name="api-key-generate"),
    path('api-key/generate/', ApiView.as_view(), name="api-key-generate"),
    path('api-key/re-generate', ApiView.as_view(), name="api-key-re-generate"),
    path('api-key/re-generate/', ApiView.as_view(), name="api-key-re-generate"),
    path('api-key/reveal', ApiView.as_view(), name="api-key-reveal"),
    path('api-key/reveal/', ApiView.as_view(), name="api-key-reveal"),
    path('api-key/set-primary', ApiView.as_view(), name='set-primary-key'),
    path('api-key/set-primary/', ApiView.as_view(), name='set-primary-key'),
    # # api key end
    # # ========================================================================== #
    # # ========================================================================== #
    path('response', ResponseView.as_view(), name="response"),
]


File: pages/views.py
----------------------------------------
from .classes.account.view import *
from .classes.authentication.view import *
from .classes.system.view import *
from .classes.product.view import *
from .classes.plan.view import *
from .classes.subscription.view import *
from .classes.cart.view import *
from .classes.checkout.view import *
from .classes.api.view import *
from .classes.order.view import *
from .classes.observation.view import *
from .classes.webhook.view import *





File: django/directory-to-text.bash
----------------------------------------
#!/bin/bash

# Check if a directory is passed as an argument
if [ -z "$1" ]; then
  echo "No directory provided. Please enter a directory path:"
  read -r DIRECTORY
else
  DIRECTORY="$1"
fi

# Check if the directory exists
if [ ! -d "$DIRECTORY" ]; then
  echo "Error: '$DIRECTORY' is not a valid directory."
  exit 1
fi

# Output file name
OUTPUT_FILE="directory_structure_and_files.txt"

# Predefined paths to exclude, including .DS_Store and .sqlite3 files
EXCLUDED_PATHS=("*/__pycache__/*" "*/.git/*" "*.log" "*.tmp" "*.sqlite3" "*.DS_Store" "*/images/*" "*/videos/*" "*.png" "*.jpg" "*/staticfiles/*" "*/static/*" "*__pycache__*")

# Ask the user if they want to add more paths to exclude
echo "Do you want to exclude additional files or directories? (y/n)"
read -r ADD_EXCLUSIONS

if [[ "$ADD_EXCLUSIONS" =~ ^[Yy]$ ]]; then
  echo "Enter paths or patterns to exclude (one per line). Type 'done' when finished:"
  while true; do
    read -r PATH_TO_EXCLUDE
    if [[ "$PATH_TO_EXCLUDE" == "done" ]]; then
      break
    fi
    EXCLUDED_PATHS+=("$PATH_TO_EXCLUDE")
  done
fi

# Display the list of exclusions
echo "Excluding the following paths:"
for path in "${EXCLUDED_PATHS[@]}"; do
  echo "- $path"
done

# Create or overwrite the output file
echo "Directory structure and file contents for: $DIRECTORY" > "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Generate the directory tree structure, excluding specific paths, and append to the output file
echo "Generating directory structure..." >> "$OUTPUT_FILE"
tree "$DIRECTORY" -I "$(IFS='|'; echo "${EXCLUDED_PATHS[*]}")" >> "$OUTPUT_FILE" 2>/dev/null || echo "tree command failed. Please install it." >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Add file contents below the tree structure
echo "Appending file contents..." >> "$OUTPUT_FILE"

# Use find to exclude unwanted paths and process the files
FIND_EXCLUDE_ARGS=""
for path in "${EXCLUDED_PATHS[@]}"; do
  FIND_EXCLUDE_ARGS="$FIND_EXCLUDE_ARGS -not -path \"$path\""
done

eval find "$DIRECTORY" -type f $FIND_EXCLUDE_ARGS | while read -r FILE; do
  echo "File: $FILE" >> "$OUTPUT_FILE"
  echo "----------------------------------------" >> "$OUTPUT_FILE"
  cat "$FILE" >> "$OUTPUT_FILE" 2>/dev/null || echo "Error reading $FILE" >> "$OUTPUT_FILE"
  echo -e "\n\n" >> "$OUTPUT_FILE"
done

echo "Done! Output saved to $OUTPUT_FILE"



File: django/system/asgi.py
----------------------------------------
"""
ASGI config for system project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'system.settings')

application = get_asgi_application()



File: django/system/__init__.py
----------------------------------------



File: django/system/settings.py
----------------------------------------
"""
Django settings for system project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-de%grz)b%=2(k*j^$zr7+##70hc9d4a0c%cprnj4coacmu3zxn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
APPEND_SLASH = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pages.apps.PagesConfig',
    'rest_framework',
    'drf_spectacular',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'Europe/London'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/media/'  # URL to access media files
MEDIA_ROOT = BASE_DIR / 'media'  # Directory where uploaded media files are stored
STATIC_ROOT = BASE_DIR / 'staticfiles'  # This is where collectstatic will gather all static files
STATICFILES_DIRS = [
    BASE_DIR / "static",
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

STRIPE_PUBLISHABLE_KEY=os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY=os.getenv('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET=os.getenv('STRIPE_WEBHOOK_SECRET')
if DEBUG:
    STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_LOCAL_WEBHOOK_SECRET')

AUTH_USER_MODEL = 'pages.Account'

# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend',  
#     'pages.auth_backends.JWTAuthenticationBackend',
# ]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS':'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS={
    'TITLE': 'Clean SMRs | Swagger Documentation',
}

LOGOUT_REDIRECT_URL = '/login'
LOGIN_URL = '/login'




File: django/system/urls.py
----------------------------------------
"""
URL configuration for system project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf.urls.static import static
from django.conf import settings
from pages.views import Error404View

urlpatterns = [
    path('', include('pages.urls')),
    path('admin/', admin.site.urls),
     
]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# Catch-all pattern for 404 errors
urlpatterns += [
    path('<path:dummy>/', Error404View.as_view(), name="error"),
]


File: django/system/wsgi.py
----------------------------------------
"""
WSGI config for system project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'system.settings')

application = get_wsgi_application()



File: django/.env
----------------------------------------
STRIPE_PUBLISHABLE_KEY=pk_test_51QRetrLqX3boq1N31U6sZSIOVZlAGejCaTU6yG6YBfKP2gCVm9KXpNCETmmzKTWE2t5GkWVsDNw6tKfFnjNZDfrZ00WbDFgdVD
STRIPE_SECRET_KEY=sk_test_51QRetrLqX3boq1N32mj39hRFxYQEGv4A7KEQWE3f8zlNZyuk1sRePYhz3J7tNM1pLpJiN58w1ltp38pVU0Xo7WxJ00yGBrbohr
STRIPE_LOCAL_WEBHOOK_SECRET=whsec_46d41f9b8ae3f57e6666848a57b66543c00fa4c21dc4f2210d427081fcb43695
STRIPE_WEBHOOK_SECRET=whsec_mS5AGeESbCraBfUM3pfxT1HQV6ujZsXm
EMAIL_HOST_USER=cookiekingsn2001@gmail.com
EMAIL_HOST_PASSWORD=ocmylqvenvnxslfy
DJANGO_URL=http://35.165.93.124
DJANGO_LOCAL_HOST_URL=http://127.0.0.1:8000
FLASK_URL=http://54.213.235.34
FLASK_LOCAL_HOST_URL=http://127.0.0.1:5000
DJANGO_SERVER_IP=35.165.93.124
FLASK_SERVER_IP=54.213.235.34
LOCAL_HOST_IP=127.0.0.1


File: django/templates/webhook/webhook.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/order/order.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/order/orders.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% load custom_filters %}
{% block content %}
<div class="container mt-5">
    <h2 class="text-center mb-4">Your Orders</h2>
    {% if orders %}
    <div class="table-responsive mt-4">
        <table class="table table-bordered table-hover">
            <thead class="thead-light">
                <tr>
                    <th>Order ID</th>
                    <th>Items</th>
                    <th>Order Date</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                {% for order in orders %}
                <tr>
                    <td>{{ order.id }}</td>
                    <td>
                        <ul class="list-unstyled">
                            {% for item in order.order_items.all %}
                            <li>
                                {% if item.product %}
                                {{ item.product.name }}
                                {% elif item.price %}
                                {{ item.price.name }}
                                {% elif item.plan %}
                                {{ item.plan.name }}
                                {% endif %}
                                (Quantity: {{ item.quantity }})
                            </li>
                            {% endfor %}
                        </ul>
                    </td>
                    <td>{{ order.created|date:"M d, Y" }}</td>
                    <td>
                        ${{ order.order_items.all|sum_prices }}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {% else %}
    <p class="text-center">No orders found.</p>
    {% endif %}
</div>
{% endblock %}


File: django/templates/plan/plans.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/plan/create.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/plan/edit.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/plan/plan.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/product/product.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="product-container">
    <h1>{{ product.name }}</h1>
    <p>{{ product.description }}</p>

    <!-- Product Images -->
    <div class="product-images">
        <h3>Images:</h3>
        {% for image in product.images.all %}
            {% if image.image %}
                <img src="{{ image.image.url }}" alt="Uploaded Image">
            {% elif image.image_url %}
                <img src="{{ image.image_url }}" alt="External Image">
            {% endif %}
            {% if image.stripe_file_url %}
                <p><a href="{{ image.stripe_file_url }}" target="_blank">View Stripe File</a></p>
            {% endif %}
        {% endfor %}
    </div>

    <!-- Product Prices -->
    <div class="product-price">
        <h3>Price:</h3>
        {% for price in product.prices.all %}
            <p>${{ price.unit_amount }}</p>
        {% empty %}
            <p>No price available.</p>
        {% endfor %}
    </div>

    <!-- Add to Cart -->
    <form class="add-to-cart-form" data-product-id="{{ product.id }}">
        {% csrf_token %}
        <input type="number" name="quantity" value="1" min="1">
        <button type="button" class="add-to-cart-button">Add to Cart</button>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        $('.add-to-cart-button').on('click', function() {
            const form = $(this).closest('.add-to-cart-form');
            const productId = form.data('product-id');
            const quantity = form.find('input[name="quantity"]').val();
            const csrfToken = form.find('input[name="csrfmiddlewaretoken"]').val();

            $.ajax({
                url: "{% url 'add_to_cart' %}",
                method: "POST",
                data: {
                    product_id: productId,
                    quantity: quantity,
                    csrfmiddlewaretoken: csrfToken
                },
                success: function(response) {
                    alert('Item added to cart!');
                },
                error: function(xhr) {
                    alert('Failed to add item to cart.');
                }
            });
        });
    });
</script>
{% endblock %}



File: django/templates/product/products.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container mt-5">
    <h1 class="text-center mb-4">Products</h1>
    <div class="row">
        {% for product in products %}
        <div class="col-md-4 mb-4">
            <div class="card product-card">
                {% if product.images.all %}
                <img src="{{ product.images.first.image.url }}" alt="{{ product.name }}" class="card-img-top img-fluid">
                {% endif %}
                <div class="card-body">
                    <h2 class="card-title">{{ product.name }}</h2>
                    <p class="card-text">{{ product.description }}</p>

                    <!-- Display price -->
                    {% if product.prices.exists %}
                    <p class="card-text">
                        <strong>Price:</strong>
                        {{ product.prices.first.unit_amount|floatformat:2 }} {{ product.prices.first.currency|upper }}
                    </p>
                    {% else %}
                    <p class="card-text text-muted"><em>No price available</em></p>
                    {% endif %}

                    <!-- Action Buttons -->
                    <div class="btn-group mt-3" role="group">
                        <a href="{% url 'product-update' product.id %}" class="btn btn-primary">Edit</a>
                        {% if request.user.is_superuser %}
                        <form method="POST" action="{% url 'product-delete' product.id %}" style="display:inline;">
                            {% csrf_token %}
                            <input type="hidden" name="action" value="delete">
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                        {% endif %}

                        <!-- Add to Cart Button -->
                        <form method="POST" action="{% url 'add-to-cart' product.id %}" style="display:inline;">
                            {% csrf_token %}
                            <button type="submit" class="btn btn-success">Add to Cart</button>
                        </form>

                        <!-- Buy Now Button -->
                        <form method="POST" action="{% url 'buy-now' product.id %}" style="display:inline;">
                            {% csrf_token %}
                            <button type="submit" class="btn btn-warning">Buy Now</button>
                        </form>

                        <!-- View Product Button -->
                        <a href="{% url 'product-detail' product.id %}" class="btn btn-info">View Product</a>
                    </div>
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}


File: django/templates/product/create.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container mt-5">
    <h1 class="text-center mb-4">{% if product %}Update{% else %}Create{% endif %} Product</h1>
    <form method="POST" enctype="multipart/form-data" class="needs-validation" novalidate>
        {% csrf_token %}
        {{ form.as_p }}

        <!-- Product Type Selection -->
        <div class="mb-4">
            <label for="type" class="form-label">Product Type</label>
            <select id="type" name="type" class="form-select" required>
                <option value="good" {% if form.type.value == 'good' %}selected{% endif %}>Goods</option>
                <option value="service" {% if form.type.value == 'service' %}selected{% endif %}>Subscription</option>
            </select>
        </div>

        <!-- Price Details -->
        <div class="mb-4">
            <h5>Price Details</h5>
            <label for="price_amount" class="form-label">Price Amount (in dollars)</label>
            <input 
                type="number" 
                step="0.01" 
                id="price_amount" 
                name="price_amount" 
                class="form-control" 
                placeholder="e.g., 10.50 (for $10.50)" 
                min="0.01" 
                max="1000000.00" 
                required>
            
            <label for="price_currency" class="form-label mt-3">Currency</label>
            <select id="price_currency" name="price_currency" class="form-select" required>
                <option value="usd">USD</option>
                <option value="eur">EUR</option>
                <!-- Add other currencies as needed -->
            </select>

            <label for="price_interval" class="form-label mt-3">Billing Interval</label>
            <select id="price_interval" name="price_interval" class="form-select">
                <option value="one_time">One Time</option>
                <option value="month">Monthly</option>
                <option value="year">Yearly</option>
            </select>
        </div>

        <!-- Existing Images Section -->
        {% if images %}
        <div class="mb-4">
            <h5>Existing Images</h5>
            <div class="row">
                {% for image in images %}
                <div class="col-md-3 mb-3">
                    <img src="{{ image.image.url }}" alt="Product Image" class="img-fluid">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="delete_images" value="{{ image.id }}" id="deleteImage{{ image.id }}">
                        <label class="form-check-label" for="deleteImage{{ image.id }}">Delete</label>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endif %}

        <!-- Upload New Images -->
        <div class="mb-4">
            <label for="images" class="form-label">Add New Images</label>
            <input type="file" id="images" name="images" class="form-control" multiple>
        </div>

        <!-- Existing Videos Section -->
        {% if videos %}
        <div class="mb-4">
            <h5>Existing Videos</h5>
            <div class="row">
                {% for video in videos %}
                <div class="col-md-3 mb-3">
                    <video controls class="img-fluid">
                        <source src="{{ video.video.url }}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="delete_videos" value="{{ video.id }}" id="deleteVideo{{ video.id }}">
                        <label class="form-check-label" for="deleteVideo{{ video.id }}">Delete</label>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endif %}

        <!-- Upload New Videos -->
        <div class="mb-4">
            <label for="videos" class="form-label">Add New Videos</label>
            <input type="file" id="videos" name="videos" class="form-control" multiple>
        </div>

        <button type="submit" class="btn btn-primary w-100">{% if product %}Update{% else %}Create{% endif %} Product</button>
    </form>
</div>
{% endblock %}


File: django/templates/product/edit.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/checkout/failure.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
Checkout Failure!
{% endblock %}


File: django/templates/checkout/checkouts.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/checkout/checkout.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/checkout/success.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% load custom_filters %}
{% block content %}
<div class="container text-center mt-5">
    <div class="card mx-auto" style="max-width: 600px; border: 2px solid #28a745;">
        <div class="card-body">
            <h1 class="text-success">
                <i class="bi bi-check-circle-fill"></i> Success!
            </h1>
            <h2 class="mt-3">Your Checkout is Complete</h2>
            <p class="mt-3">Thank you for your purchase! Your order has been successfully processed.</p>
            <hr>
            {% if order %}
            <div class="text-start mt-4">
                <h4>Order Details</h4>
                <p><strong>Order ID:</strong> {{ order.id }}</p>
                <p><strong>Order Date:</strong> {{ order.created|date:"F j, Y, g:i a" }}</p>
                <h5 class="mt-3">Items:</h5>
                <ul class="list-group">
                    {% for item in order.order_items.all %}
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>{{ item.product.name }}</strong>
                            <br>
                            Quantity: {{ item.quantity }}
                        </div>
                        <span>${{ item.price.unit_amount|floatformat:2 }}</span>
                    </li>
                    {% endfor %}
                </ul>
                <div class="text-end mt-3">
                    <h5><strong>Total:</strong> ${{ order.order_items.all|sum_prices }}</h5>
                </div>
            </div>
            {% else %}
            <p>No order details available.</p>
            {% endif %}
            <hr>
            <p class="mt-3">Need help? <a href="{% url 'support' %}">Contact Support</a></p>
            <a href="{% url 'index' %}" class="btn btn-primary mt-3">Go to Homepage</a>
        </div>
    </div>
</div>
{% endblock %}



File: django/templates/subscription/subscriptions.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container mt-5">
    <h2 class="text-center mb-4">Your Subscriptions</h2>
    {% if subscriptions %}
    <div class="table-responsive mt-4">
        <table class="table table-bordered table-hover">
            <thead class="thead-light">
                <tr>
                    <th>Subscription ID</th>
                    <th>Items</th>
                    <th>Status</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for subscription in subscriptions %}
                <tr>
                    <td>{{ subscription.stripe_subscription_id }}</td>
                    <td>
                        {% for item in subscription.subscription_items.all %}
                        {% if item.plan %}
                        Plan: {{ item.plan.stripe_plan_id }}
                        {% elif item.price %}
                        Price: {{ item.price.stripe_price_id }}
                        {% endif %}
                        (Quantity: {{ item.quantity }})<br>
                        {% endfor %}
                    </td>
                    <td>{{ subscription.status }}</td>
                    <td>{{ subscription.created|date:"M d, Y" }}</td>
                    <td>
                        {% if subscription.deleted %}
                        {{ subscription.deleted|date:"M d, Y" }}
                        {% else %}
                        Active
                        {% endif %}
                    </td>
                    <td>
                        {% if subscription.status == 'active' %}
                        <form method="POST" action="{% url 'subscription-cancel' %}">
                            {% csrf_token %}
                            <input type="hidden" name="subscription_id" value="{{ subscription.id }}">
                            <button type="submit" class="btn btn-danger btn-sm">Cancel</button>
                        </form>
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {% else %}
    <p class="text-center">No subscriptions found.</p>
    {% endif %}
</div>
{% endblock %}


File: django/templates/subscription/subscription.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/system/faqs.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
FAQs - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>Frequently Asked Questions</h1>
            <p>Here are some of the most common questions we receive from our customers. If you have a question that isn't answered here, please feel free to <a href="{% url 'contact' %}">contact us</a>.</p>
            
            <div class="accordion" id="faqAccordion">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                            What is a Small Modular Reactor (SMR)?
                        </button>
                    </h2>
                    <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#faqAccordion">
                        <div class="accordion-body">
                            A Small Modular Reactor (SMR) is a type of nuclear reactor that is smaller in size and output compared to traditional nuclear reactors. SMRs are designed to be more flexible and scalable, making them ideal for providing power to smaller grids or remote locations.
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingTwo">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                            How do I purchase a CleanSMRs product?
                        </button>
                    </h2>
                    <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#faqAccordion">
                        <div class="accordion-body">
                            You can purchase our products by visiting the <a href="{% url 'products' %}">Products</a> page on our website. From there, you can view detailed information about each product and proceed to purchase.
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingThree">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                            What support options are available?
                        </button>
                    </h2>
                    <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#faqAccordion">
                        <div class="accordion-body">
                            We offer a variety of support options, including email support, phone support, and a comprehensive <a href="{% url 'support' %}">Support</a> page with resources and FAQs. You can also submit a support ticket through our website.
                        </div>
                    </div>
                </div>
                <!-- Add more FAQ items as needed -->
            </div>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/tutorial.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
Tutorial - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>Tutorial: Setting Up Your CleanSMRs Product</h1>
            <p>Welcome to the CleanSMRs tutorial. This guide will walk you through the steps to set up and start using your CleanSMRs product effectively.</p>
            
            <h2>Step 1: Unboxing and Initial Setup</h2>
            <p>Begin by carefully unboxing your CleanSMRs product. Ensure that all components are present and undamaged. Follow the instructions in the user manual to connect the necessary cables and power on the device.</p>
            
            <h2>Step 2: Connecting to the Network</h2>
            <p>To connect your CleanSMRs product to the network, follow these steps:</p>
            <ol>
                <li>Access the settings menu on the device.</li>
                <li>Select "Network Settings" and choose your Wi-Fi network.</li>
                <li>Enter the Wi-Fi password and confirm the connection.</li>
            </ol>
            
            <h2>Step 3: Configuring the Device</h2>
            <p>Once connected to the network, configure your device settings to suit your preferences:</p>
            <ul>
                <li>Set the device name and location.</li>
                <li>Adjust the power settings for optimal performance.</li>
                <li>Enable any additional features you wish to use.</li>
            </ul>
            
            <h2>Step 4: Monitoring and Maintenance</h2>
            <p>Regular monitoring and maintenance are essential for optimal performance. Use the CleanSMRs app to track device status and receive notifications for any required maintenance tasks.</p>
            
            <h2>Additional Resources</h2>
            <p>For more detailed instructions and troubleshooting tips, refer to the <a href="{% url 'user-guides' %}">User Guides</a> section on our website.</p>
            
            <h2>Need Help?</h2>
            <p>If you encounter any issues or have questions, please visit our <a href="{% url 'support' %}">Support</a> page or contact our support team for assistance.</p>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/index.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block title %}
    Home - CleanSMRs
{% endblock %}
{% block content %}
<div class="hero-banner position-relative text-center text-dark py-5">
    <div class="hero-content">
        <h1>Welcome to CleanSMRs</h1>
        <p>Your go-to solution for sustainable energy solutions.</p>
    </div>
</div>
<div class="container mt-5">
    <div class="row">
        <div class="col-md-4 d-flex align-items-stretch">
            <div class="card h-100">
                <div class="card-body d-flex flex-column justify-content-between">
                    <div class="mb-4">
                        <h5 class="card-title">Our Products</h5>
                        <p class="card-text">Explore our range of products designed to meet your energy needs.</p>
                    </div>
                    <a href="{% url 'products' %}" class="btn btn-primary mt-auto">View Products</a>
                </div>
            </div>
        </div>
        <div class="col-md-4 d-flex align-items-stretch">
            <div class="card h-100">
                <div class="card-body d-flex flex-column justify-content-between">
                    <div class="mb-4">
                        <h5 class="card-title">Plans & Pricing</h5>
                        <p class="card-text">Find a plan that suits your budget and requirements.</p>
                    </div>
                    <a href="{% url 'plans-and-pricing' %}" class="btn btn-primary mt-auto">See Plans</a>
                </div>
            </div>
        </div>
        <div class="col-md-4 d-flex align-items-stretch">
            <div class="card h-100">
                <div class="card-body d-flex flex-column justify-content-between">
                    <div class="mb-4">
                        <h5 class="card-title">Contact Us</h5>
                        <p class="card-text">Have questions? Get in touch with our team.</p>
                    </div>
                    <a href="{% url 'contact' %}" class="btn btn-primary mt-auto">Contact</a>
                </div>
            </div>
        </div>
    </div>
    <!-- Enhanced Section for Clean Energy Benefits -->
    <div class="mt-5 p-4 bg-light rounded shadow-sm">
        <h2 class="text-center mb-4">Benefits of Clean Energy</h2>
        <p>Clean energy is revolutionizing the way we power our world. By harnessing renewable resources, we can significantly reduce our carbon footprint and pave the way for a sustainable future. Here are some key benefits of clean energy:</p>
        <div class="row">
            <div class="col-md-6">
                <ul class="list-unstyled">
                    <li class="mb-3">
                        <h5><strong>Environmental Impact</strong></h5>
                        <p>Clean energy sources like wind, solar, and nuclear power produce little to no greenhouse gas emissions, helping to combat climate change and reduce air pollution.</p>
                    </li>
                    <li class="mb-3">
                        <h5><strong>Energy Security</strong></h5>
                        <p>By diversifying our energy sources, we reduce dependence on fossil fuels and enhance energy security, ensuring a stable and reliable energy supply.</p>
                    </li>
                    <li class="mb-3">
                        <h5><strong>Economic Growth</strong></h5>
                        <p>The clean energy sector is a rapidly growing industry, creating jobs and driving economic growth through innovation and investment.</p>
                    </li>
                </ul>
            </div>
            <div class="col-md-6">
                <ul class="list-unstyled">
                    <li class="mb-3">
                        <h5><strong>Health Benefits</strong></h5>
                        <p>Reducing air pollution from fossil fuels can lead to improved public health outcomes, decreasing respiratory and cardiovascular diseases.</p>
                    </li>
                    <li class="mb-3">
                        <h5><strong>Reliability</strong></h5>
                        <p>Technologies like Small Modular Reactors (SMRs) provide a stable and continuous power supply, essential for data centers and other critical infrastructure.</p>
                    </li>
                    <li class="mb-3">
                        <h5><strong>Innovation and Sustainability</strong></h5>
                        <p>Clean energy fosters innovation in technology and sustainability practices, encouraging a shift towards a more environmentally conscious society.</p>
                    </li>
                </ul>
            </div>
        </div>
        <p class="mt-4">At CleanSMRs, we are committed to providing innovative nuclear solutions that support the transition to a cleaner, more sustainable energy future. Join us in making a positive impact on the environment and society.</p>
    </div>
    <!-- Additional Information Section -->
    <div class="mt-5">
        <h3>Why Choose CleanSMRs?</h3>
        <p>CleanSMRs is at the forefront of the clean energy revolution, offering cutting-edge solutions that are both efficient and environmentally friendly. Our Small Modular Reactors are designed to meet the growing energy demands of data centers while minimizing environmental impact.</p>
        <p>Our commitment to sustainability and innovation ensures that we provide our clients with the best possible solutions for their energy needs. By choosing CleanSMRs, you are investing in a future that prioritizes both technological advancement and environmental stewardship.</p>
        <p>Explore our range of products and services to see how we can help you achieve your energy goals while contributing to a more sustainable world.</p>
    </div>

        <!-- Additional Information Section -->
        <div class="mt-5">
</div>
</div>
{% endblock %}


File: django/templates/system/support-ticket.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
Submit a Support Ticket - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h1>Submit a Support Ticket</h1>
            <p>If you're experiencing an issue or have a question that requires assistance, please fill out the form below to submit a support ticket. Our support team will get back to you as soon as possible.</p>
            
            <form method="post" action="{% url 'submit-support-ticket' %}">
                {% csrf_token %}
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" name="name" required>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" name="email" required>
                </div>
                <div class="mb-3">
                    <label for="subject" class="form-label">Subject</label>
                    <input type="text" class="form-control" id="subject" name="subject" required>
                </div>
                <div class="mb-3">
                    <label for="priority" class="form-label">Priority</label>
                    <select class="form-select" id="priority" name="priority" required>
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="message" class="form-label">Message</label>
                    <textarea class="form-control" id="message" name="message" rows="5" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Submit Ticket</button>
            </form>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/response.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div style="text-align: center; padding: 50px 0;">
    {% if is_error %}
        <h1 id="response-title" style="font-size: 72px; font-weight: bold; color: red;">Error</h1>
    {% else %}
        <h1 id="response-title" style="font-size: 72px; font-weight: bold; color: green;">Success</h1>
    {% endif %}
    <p id="response-message" style="font-size: 18px; color: #555;">{{ message }}</p>
    <a href="{% url 'index' %}" style="text-decoration: none; font-size: 18px; color: #007bff;">
        Go back to Home
    </a>
</div>
{% endblock %}


File: django/templates/system/about.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
About Us - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>About CleanSMRs</h1>
            <p>At CleanSMRs, we are dedicated to providing innovative and sustainable energy solutions through the use of Small Modular Reactors (SMRs). Our mission is to revolutionize the energy industry by offering clean, reliable, and efficient power solutions that meet the growing demands of modern infrastructure.</p>
            
            <h2>Our Mission</h2>
            <p>Our mission is to lead the transition to a sustainable energy future by developing cutting-edge nuclear technologies that reduce carbon emissions and promote environmental stewardship. We are committed to delivering high-quality products and services that empower our clients to achieve their energy goals while minimizing their environmental impact.</p>
            
            <h2>Our Vision</h2>
            <p>We envision a world where clean energy is the norm, and our innovative SMR solutions play a pivotal role in achieving this vision. By harnessing the power of nuclear energy, we aim to provide a stable and continuous power supply that supports the growth of data centers and other critical infrastructure.</p>
            
            <h2>Our Values</h2>
            <ul>
                <li><strong>Innovation:</strong> We are committed to pushing the boundaries of technology to develop advanced energy solutions.</li>
                <li><strong>Sustainability:</strong> We prioritize environmental responsibility in all aspects of our business.</li>
                <li><strong>Integrity:</strong> We conduct our business with honesty and transparency, building trust with our clients and partners.</li>
                <li><strong>Excellence:</strong> We strive for excellence in everything we do, from product development to customer service.</li>
            </ul>
            
            <h2>Our Team</h2>
            <p>Our team is composed of industry experts and passionate individuals who are dedicated to advancing the field of clean energy. With a diverse range of skills and expertise, we work collaboratively to deliver innovative solutions that meet the unique needs of our clients.</p>
            
            <h2>Contact Us</h2>
            <p>If you have any questions or would like to learn more about our products and services, please don't hesitate to <a href="{% url 'contact' %}">contact us</a>. We look forward to partnering with you on your journey to a sustainable energy future.</p>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/privacy-policy.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
Privacy Policy - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>Privacy Policy</h1>
            <p>At CleanSMRs, we are committed to protecting your privacy. This Privacy Policy outlines how we collect, use, disclose, and safeguard your information when you visit our website or use our services.</p>
            
            <h2>Information We Collect</h2>
            <p>We may collect personal information that you provide to us directly, such as your name, email address, and phone number, when you contact us or register for an account. We also collect information automatically as you navigate through our site, such as your IP address, browser type, and usage data.</p>
            
            <h2>How We Use Your Information</h2>
            <p>We use the information we collect to:</p>
            <ul>
                <li>Provide, operate, and maintain our website and services</li>
                <li>Improve, personalize, and expand our website and services</li>
                <li>Understand and analyze how you use our website</li>
                <li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the website, and for marketing and promotional purposes</li>
                <li>Process your transactions and manage your orders</li>
                <li>Find and prevent fraud</li>
            </ul>
            
            <h2>Sharing Your Information</h2>
            <p>We do not sell, trade, or otherwise transfer your personal information to outside parties without your consent, except as described in this policy. We may share your information with trusted third parties who assist us in operating our website, conducting our business, or servicing you, so long as those parties agree to keep this information confidential.</p>
            
            <h2>Data Security</h2>
            <p>We implement a variety of security measures to maintain the safety of your personal information. However, no method of transmission over the Internet or method of electronic storage is 100% secure, and we cannot guarantee its absolute security.</p>
            
            <h2>Your Rights</h2>
            <p>You have the right to access, update, or delete your personal information. If you wish to exercise any of these rights, please contact us using the information provided below.</p>
            
            <h2>Changes to This Privacy Policy</h2>
            <p>We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page. You are advised to review this Privacy Policy periodically for any changes.</p>
            
            <h2>Contact Us</h2>
            <p>If you have any questions about this Privacy Policy, please contact us at:</p>
            <p>Email: privacy@cleansmrs.com</p>
            <p>Phone: +1 (123) 456-7890</p>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/contact.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
Contact Us - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-8">
            <h1>Contact Us</h1>
            <p>If you have any questions, comments, or would like more information about our products and services, please feel free to reach out to us using the form below. We look forward to hearing from you!</p>
            
            <form method="post" action="{% url 'contact' %}">
                {% csrf_token %}
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" name="name" required>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" name="email" required>
                </div>
                <div class="mb-3">
                    <label for="subject" class="form-label">Subject</label>
                    <input type="text" class="form-control" id="subject" name="subject" required>
                </div>
                <div class="mb-3">
                    <label for="message" class="form-label">Message</label>
                    <textarea class="form-control" id="message" name="message" rows="5" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Send Message</button>
            </form>
        </div>
        <div class="col-md-4">
            <h2>Our Contact Information</h2>
            <p><strong>Email:</strong> info@cleansmrs.com</p>
            <p><strong>Phone:</strong> +1 (123) 456-7890</p>
            <p><strong>Address:</strong> 123 Clean Energy Way, Sustainable City, SC 12345</p>
            
            <h3>Follow Us</h3>
            <ul class="list-unstyled">
                <li><a href="#" target="_blank">LinkedIn</a></li>
                <li><a href="#" target="_blank">Twitter</a></li>
                <li><a href="#" target="_blank">Facebook</a></li>
            </ul>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/support.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
Support - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>Support</h1>
            <p>Welcome to the CleanSMRs Support page. We are here to help you with any questions or issues you may have. Below you will find various resources and ways to get in touch with our support team.</p>
            
            <h2>Contact Support</h2>
            <p>If you need immediate assistance, please contact our support team:</p>
            <ul>
                <li><strong>Email:</strong> support@cleansmrs.com</li>
                <li><strong>Phone:</strong> +1 (123) 456-7890</li>
                <li><strong>Support Hours:</strong> Monday to Friday, 9 AM - 5 PM (EST)</li>
            </ul>
            
            <h2>Frequently Asked Questions (FAQs)</h2>
            <p>Here are some of the most common questions we receive from our customers:</p>
            <ul>
                <li><strong>How do I create an account?</strong> Visit our <a href="{% url 'register' %}">registration page</a> to sign up for an account.</li>
                <li><strong>How can I reset my password?</strong> You can reset your password by clicking on the "Forgot Password" link on the login page.</li>
                <li><strong>Where can I find product documentation?</strong> Product documentation is available in the <a href="{% url 'resources' %}">Resources</a> section of our website.</li>
            </ul>
            
            <h2>Resources</h2>
            <p>Explore our resources for additional support:</p>
            <ul>
                <li><a href="{% url 'user-guides' %}">User Guides</a></li>
                <li><a href="{% url 'tutorials' %}">Tutorials</a></li>
                <li><a href="{% url 'community-forum' %}">Community Forum</a></li>
            </ul>
            
            <h2>Submit a Support Ticket</h2>
            <p>If you have a specific issue that requires further assistance, please submit a support ticket through our <a href="{% url 'support-ticket' %}">Support Ticket System</a>.</p>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/plans-and-pricing.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block title %}
    Plans & Pricing - CleanSMRs
{% endblock %}
{% block content %}
<div class="container mt-5">
    <h1 class="text-center mb-4">Plans and Pricing</h1>
    <div class="toggle-buttons text-center mt-4">
        <button class="btn btn-primary" id="monthly-btn" onclick="showPlans('monthly')">Monthly</button>
        <button class="btn btn-secondary" id="yearly-btn" onclick="showPlans('yearly')">Yearly</button>
    </div>
    <div class="plans mt-5">
        <!-- Monthly Items -->
        <div id="monthly-plans" style="display: none;">
            <h2 class="text-center mb-4">Monthly Plans</h2>
            <div class="row">
                {% for item in monthly_items %}
                <div class="col-md-4 mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h3 class="card-title">{{ item.product.name }}</h3>
                            <p class="card-text">
                                ${{ item.amount }} / month
                            </p>
                            <form method="POST" action="{% url 'checkout-subscribe' %}">
                                {% csrf_token %}
                                <input type="hidden" name="plan_id" value="{{ item.stripe_id }}">
                                <input type="hidden" name="mode" value="subscription">
                                <button type="submit" class="btn btn-success w-100">
                                    Subscribe
                                </button>
                            </form>
                            {% if active_subscription and active_subscription.plan.stripe_plan_id != item.stripe_id %}
                            <form method="POST" action="{% url 'checkout-upgrade' %}" class="mt-2">
                                {% csrf_token %}
                                <input type="hidden" name="plan_id" value="{{ item.stripe_id }}">
                                <button type="submit" class="btn btn-primary w-100">
                                    Upgrade to {{ item.product.name }}
                                </button>
                            </form>
                            {% endif %}
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        <!-- Yearly Items -->
        <div id="yearly-plans" style="display: none;">
            <h2 class="text-center mb-4">(-30% off) Yearly Plans</h2>
            <div class="row">
                {% for item in yearly_items %}
                <div class="col-md-4 mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h3 class="card-title">{{ item.product.name }}</h3>
                            <p class="card-text">
                                ${{ item.amount }} / year
                            </p>
                            <form method="POST" action="{% url 'checkout-subscribe' %}">
                                {% csrf_token %}
                                <input type="hidden" name="plan_id" value="{{ item.stripe_id }}">
                                <input type="hidden" name="mode" value="subscription">
                                <button type="submit" class="btn btn-success w-100">
                                    Subscribe
                                </button>
                            </form>
                            {% if active_subscription and active_subscription.plan.stripe_plan_id != item.stripe_id %}
                            <form method="POST" action="{% url 'checkout-upgrade' %}" class="mt-2">
                                {% csrf_token %}
                                <input type="hidden" name="plan_id" value="{{ item.stripe_id }}">
                                <button type="submit" class="btn btn-primary w-100">
                                    Upgrade to {{ item.product.name }}
                                </button>
                            </form>
                            {% endif %}
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>
<script>
    // Show the appropriate plans based on the toggle
    function showPlans(type) {
        const monthlyPlans = document.getElementById('monthly-plans');
        const yearlyPlans = document.getElementById('yearly-plans');
        const monthlyBtn = document.getElementById('monthly-btn');
        const yearlyBtn = document.getElementById('yearly-btn');
        if (type === 'monthly') {
            monthlyPlans.style.display = 'block';
            yearlyPlans.style.display = 'none';
            monthlyBtn.classList.add('btn-primary');
            monthlyBtn.classList.remove('btn-secondary');
            yearlyBtn.classList.add('btn-secondary');
            yearlyBtn.classList.remove('btn-primary');
        } else {
            monthlyPlans.style.display = 'none';
            yearlyPlans.style.display = 'block';
            yearlyBtn.classList.add('btn-primary');
            yearlyBtn.classList.remove('btn-secondary');
            monthlyBtn.classList.add('btn-secondary');
            monthlyBtn.classList.remove('btn-primary');
        }
    }
    // Default to showing monthly plans on page load
    document.addEventListener('DOMContentLoaded', function() {
        showPlans('monthly');
    });
</script>
{% endblock %}


File: django/templates/system/404.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block content %}
    <div style="text-align: center; padding: 50px 0;">
        <h1 style="font-size: 72px; font-weight: bold; color: #ff0000;">404</h1>
        <h2 style="font-size: 36px;">Page Not Found</h2>
        <p style="font-size: 18px; color: #555;">Sorry, the page you're looking for doesn't exist or has been moved.</p>
        <a href="{% url 'index' %}" style="text-decoration: none; font-size: 18px; color: #007bff;">
            Go back to Home
        </a>
    </div>
{% endblock %}



File: django/templates/system/resources.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
Resources - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>Resources</h1>
            <p>Welcome to the CleanSMRs Resources page. Here you will find a collection of materials designed to help you better understand and utilize our products and services. Explore our guides, tutorials, and more to get the most out of your experience with CleanSMRs.</p>
            
            <h2>User Guides</h2>
            <p>Our user guides provide detailed instructions on how to set up and use our products:</p>
            <ul>
                <li><a href="{% url 'user-guide-smr' %}">Small Modular Reactor User Guide</a></li>
                <li><a href="{% url 'user-guide-portal' %}">Customer Portal User Guide</a></li>
            </ul>
            
            <h2>Tutorials</h2>
            <p>Watch our step-by-step tutorials to learn more about our products and services:</p>
            <ul>
                <li><a href="{% url 'tutorial-setup' %}">Setting Up Your SMR</a></li>
                <li><a href="{% url 'tutorial-maintenance' %}">Maintenance Tips and Tricks</a></li>
            </ul>
            
            <h2>Whitepapers</h2>
            <p>Explore our whitepapers for in-depth insights into the clean energy industry and our innovative solutions:</p>
            <ul>
                <li><a href="{% url 'whitepaper-clean-energy' %}">The Future of Clean Energy</a></li>
                <li><a href="{% url 'whitepaper-smr-technology' %}">Advancements in SMR Technology</a></li>
            </ul>
            
            <h2>FAQs</h2>
            <p>Find answers to common questions about our products and services in our <a href="{% url 'faqs' %}">Frequently Asked Questions</a> section.</p>
            
            <h2>Community Forum</h2>
            <p>Join our <a href="{% url 'community-forum' %}">Community Forum</a> to connect with other users, share experiences, and get advice from experts.</p>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/user-guide.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
User Guide - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>User Guide: CleanSMRs Product</h1>
            <p>This user guide provides detailed instructions on how to set up, configure, and use your CleanSMRs product. Follow the steps below to get started and make the most of your product.</p>
            
            <h2>Table of Contents</h2>
            <ul>
                <li><a href="#introduction">Introduction</a></li>
                <li><a href="#setup">Setup and Installation</a></li>
                <li><a href="#configuration">Configuration</a></li>
                <li><a href="#usage">Usage</a></li>
                <li><a href="#troubleshooting">Troubleshooting</a></li>
                <li><a href="#support">Support and Resources</a></li>
            </ul>
            
            <h2 id="introduction">Introduction</h2>
            <p>Welcome to the CleanSMRs family! Our products are designed to provide efficient and sustainable energy solutions. This guide will help you understand the features and benefits of your CleanSMRs product.</p>
            
            <h2 id="setup">Setup and Installation</h2>
            <p>Follow these steps to set up and install your CleanSMRs product:</p>
            <ol>
                <li>Unbox the product and ensure all components are included.</li>
                <li>Connect the device to a power source using the provided cables.</li>
                <li>Follow the on-screen instructions to complete the initial setup.</li>
            </ol>
            
            <h2 id="configuration">Configuration</h2>
            <p>Configure your product settings to suit your needs:</p>
            <ul>
                <li>Access the settings menu to adjust network preferences.</li>
                <li>Set up user accounts and permissions.</li>
                <li>Enable additional features and integrations.</li>
            </ul>
            
            <h2 id="usage">Usage</h2>
            <p>Learn how to use your CleanSMRs product effectively:</p>
            <ul>
                <li>Monitor performance through the dashboard.</li>
                <li>Schedule regular maintenance checks.</li>
                <li>Utilize advanced features for enhanced functionality.</li>
            </ul>
            
            <h2 id="troubleshooting">Troubleshooting</h2>
            <p>If you encounter any issues, refer to the troubleshooting section for solutions:</p>
            <ul>
                <li>Common error messages and their meanings.</li>
                <li>Steps to resolve connectivity issues.</li>
                <li>Contact support for further assistance.</li>
            </ul>
            
            <h2 id="support">Support and Resources</h2>
            <p>For additional support, visit our <a href="{% url 'support' %}">Support</a> page or contact our team. You can also explore more resources in the <a href="{% url 'resources' %}">Resources</a> section.</p>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/whitepaper.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% load static %}

{% block title %}
White Paper - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>White Paper: The Future of Clean Energy</h1>
            <p>This white paper explores the advancements in clean energy technologies and the role of Small Modular Reactors (SMRs) in shaping a sustainable future. It provides insights into the benefits, challenges, and potential of SMRs in the energy landscape.</p>
            
            <h2>Overview</h2>
            <p>As the world moves towards more sustainable energy solutions, the demand for clean and efficient power sources is increasing. This white paper examines how SMRs can meet this demand by offering a reliable and scalable energy solution.</p>
            
            <h2>Key Insights</h2>
            <ul>
                <li><strong>Environmental Benefits:</strong> SMRs produce minimal greenhouse gas emissions, contributing to a reduction in global carbon footprint.</li>
                <li><strong>Economic Impact:</strong> The deployment of SMRs can drive economic growth by creating jobs and stimulating investment in the energy sector.</li>
                <li><strong>Technological Advancements:</strong> Recent innovations in SMR technology have improved safety, efficiency, and cost-effectiveness.</li>
                <li><strong>Challenges and Opportunities:</strong> The paper discusses the regulatory, financial, and technical challenges facing SMR deployment and the opportunities for overcoming these barriers.</li>
            </ul>
            
            <h2>Conclusion</h2>
            <p>SMRs represent a promising solution for the future of clean energy. By addressing the challenges and leveraging the opportunities, SMRs can play a crucial role in achieving global sustainability goals.</p>
            
            <h2>Download the Full White Paper</h2>
            <p>To access the complete white paper, please click the link below:</p>
            <a href="{% static 'documents/whitepaper-clean-energy.pdf' %}" class="btn btn-primary" target="_blank">Download White Paper</a>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/terms-of-service.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
Terms of Service - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>Terms of Service</h1>
            <p>Welcome to CleanSMRs. By accessing or using our website and services, you agree to be bound by the following terms and conditions. Please read them carefully.</p>
            
            <h2>1. Acceptance of Terms</h2>
            <p>By accessing or using our website, you agree to comply with and be bound by these Terms of Service and our Privacy Policy. If you do not agree to these terms, please do not use our website.</p>
            
            <h2>2. Changes to Terms</h2>
            <p>We reserve the right to modify these terms at any time. Any changes will be effective immediately upon posting on this page. Your continued use of the website after any changes constitutes your acceptance of the new terms.</p>
            
            <h2>3. Use of Our Services</h2>
            <p>You agree to use our services only for lawful purposes and in accordance with these terms. You are responsible for ensuring that your use of the website complies with all applicable laws and regulations.</p>
            
            <h2>4. User Accounts</h2>
            <p>To access certain features of our website, you may be required to create an account. You agree to provide accurate and complete information and to keep your account information updated. You are responsible for maintaining the confidentiality of your account and password.</p>
            
            <h2>5. Intellectual Property</h2>
            <p>All content on our website, including text, graphics, logos, and images, is the property of CleanSMRs or our licensors and is protected by copyright and other intellectual property laws. You may not use, reproduce, or distribute any content without our express written permission.</p>
            
            <h2>6. Limitation of Liability</h2>
            <p>CleanSMRs shall not be liable for any direct, indirect, incidental, special, or consequential damages resulting from the use or inability to use our website or services, even if we have been advised of the possibility of such damages.</p>
            
            <h2>7. Governing Law</h2>
            <p>These terms shall be governed by and construed in accordance with the laws of the jurisdiction in which CleanSMRs operates, without regard to its conflict of law principles.</p>
            
            <h2>8. Contact Us</h2>
            <p>If you have any questions about these Terms of Service, please contact us at:</p>
            <p>Email: legal@cleansmrs.com</p>
            <p>Phone: +1 (123) 456-7890</p>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/user-guides.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
User Guides - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>User Guides</h1>
            <p>Welcome to the CleanSMRs User Guides page. Here you will find a collection of guides designed to help you understand and effectively use our products and services. Click on a guide to learn more.</p>
            
            <div class="list-group">
                <a href="{% url 'user-guide-smr' %}" class="list-group-item list-group-item-action">
                    <h5 class="mb-1">Small Modular Reactor User Guide</h5>
                    <p class="mb-1">Comprehensive instructions on setting up and using your Small Modular Reactor.</p>
                </a>
                <a href="{% url 'user-guide-portal' %}" class="list-group-item list-group-item-action">
                    <h5 class="mb-1">Customer Portal User Guide</h5>
                    <p class="mb-1">Step-by-step guide to navigating and utilizing the features of the Customer Portal.</p>
                </a>
                <!-- Add more user guide links as needed -->
            </div>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/tutorials.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
Tutorials - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>Tutorials</h1>
            <p>Welcome to the CleanSMRs Tutorials page. Here you will find a collection of tutorials designed to help you get the most out of your CleanSMRs products and services. Click on a tutorial to learn more.</p>
            
            <div class="list-group">
                <a href="{% url 'tutorial-setup' %}" class="list-group-item list-group-item-action">
                    <h5 class="mb-1">Setting Up Your CleanSMRs Product</h5>
                    <p class="mb-1">Learn how to unbox, set up, and configure your CleanSMRs product for optimal performance.</p>
                </a>
                <a href="{% url 'tutorial-maintenance' %}" class="list-group-item list-group-item-action">
                    <h5 class="mb-1">Maintenance Tips and Tricks</h5>
                    <p class="mb-1">Discover best practices for maintaining your CleanSMRs product to ensure long-lasting performance.</p>
                </a>
                <!-- Add more tutorial links as needed -->
            </div>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/system/error.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div style="text-align: center; padding: 50px 0;">
    <h1 style="font-size: 72px; font-weight: bold; color: #ff0000;">Error</h1>
    <h2 style="font-size: 36px;">An Error Occurred</h2>
    <p style="font-size: 18px; color: #555;">{{ error_message }}</p>
    <a href="{% url 'index' %}" style="text-decoration: none; font-size: 18px; color: #007bff;">
        Go back to Home
    </a>
</div>
{% endblock %}


File: django/templates/system/community-forum.html
----------------------------------------
{% extends 'widgets/base.html' %}

{% block title %}
Community Forum - CleanSMRs
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h1>Community Forum</h1>
            <p>Welcome to the CleanSMRs Community Forum! This is a place for users to connect, share experiences, and discuss topics related to clean energy and our products. Whether you're a new user or a seasoned expert, we encourage you to participate and contribute to the community.</p>
            
            <h2>Forum Categories</h2>
            <div class="list-group mb-4">
                <a href="#" class="list-group-item list-group-item-action">
                    <h5 class="mb-1">General Discussion</h5>
                    <p class="mb-1">Talk about anything related to clean energy and SMRs.</p>
                </a>
                <a href="#" class="list-group-item list-group-item-action">
                    <h5 class="mb-1">Product Support</h5>
                    <p class="mb-1">Get help and support for CleanSMRs products.</p>
                </a>
                <a href="#" class="list-group-item list-group-item-action">
                    <h5 class="mb-1">Feature Requests</h5>
                    <p class="mb-1">Suggest new features or improvements for our products.</p>
                </a>
                <a href="#" class="list-group-item list-group-item-action">
                    <h5 class="mb-1">Technical Discussions</h5>
                    <p class="mb-1">Dive deep into technical topics and share your expertise.</p>
                </a>
            </div>
            
            <h2>Recent Topics</h2>
            <ul class="list-group mb-4">
                <li class="list-group-item">
                    <a href="#">How to optimize SMR performance?</a> - Posted by User123
                </li>
                <li class="list-group-item">
                    <a href="#">Upcoming features in the next product update</a> - Posted by Admin
                </li>
                <li class="list-group-item">
                    <a href="#">Best practices for maintaining your SMR</a> - Posted by EnergyExpert
                </li>
            </ul>
            
            <h2>Join the Conversation</h2>
            <p>To participate in the forum, please <a href="{% url 'register' %}">register</a> for an account or <a href="{% url 'login' %}">log in</a> if you already have one. We look forward to your contributions!</p>
        </div>
    </div>
</div>
{% endblock %}


File: django/templates/payment-link/payment-link.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/cart/carts.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/cart/cart.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% load custom_filters %}
{% block content %}
<div class="container mt-5">
    <h2 class="text-center mb-4">Your Cart</h2>
    {% if cart_items %}
    <div id="cart-content" class="table-responsive">
        <table class="table table-bordered table-hover mt-3">
            <thead class="thead-light">
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for item in cart_items %}
                <tr id="cart-item-{{ item.id }}">
                    <td>{{ item.product.name }}</td>
                    <td>
                        <input type="number" class="update-quantity form-control d-inline"
                               style="width: 70px;"
                               value="{{ item.quantity }}"
                               data-url="{% url 'update-cart-item' item.id %}">
                    </td>
                    <td>
                        {% if item.product.prices.all %}
                        {% with item.product.prices.all.0 as price %}
                        ${{ price.unit_amount|floatformat:2 }}
                        {% endwith %}
                        {% else %}
                        <span class="text-danger">Price Not Available</span>
                        {% endif %}
                    </td>
                    <td>
                        {% if item.product.prices.all %}
                        {% with item.product.prices.all.0 as price %}
                        ${{ item.quantity|multiply:price.unit_amount|floatformat:2 }}
                        {% endwith %}
                        {% else %}
                        --
                        {% endif %}
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm remove-cart-item" data-url="{% url 'remove-cart-item' item.id %}">Remove</button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    <div class="text-end mt-3">
        <h4 id="cart-total">Total: ${{ cart_items|cart_total|floatformat:2 }}</h4>
    </div>
    <form method="POST" action="{% url 'checkout-create' %}" class="text-end mt-3">
        {% csrf_token %}
        <button type="submit" class="btn btn-success">Proceed to Checkout</button>
    </form>
    {% else %}
    <p class="text-center">Your cart is empty!</p>
    {% endif %}
</div>
<!-- Popup Notification -->
<div id="popup-notification" class="position-fixed bottom-0 end-0 m-3"></div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Remove item
        $('.remove-cart-item').on('click', function () {
            const url = $(this).data('url');
            const csrfToken = '{{ csrf_token }}';
            $.ajax({
                url: url,
                type: 'POST',
                headers: { 'X-CSRFToken': csrfToken },
                success: function (response) {
                    $(`#cart-item-${response.item_id}`).remove();
                    updateCartTotal(response.cart_total);
                    showNotification('Item removed from cart!');
                },
                error: function () {
                    showNotification('Failed to remove item.', true);
                }
            });
        });

        // Update quantity
        $('.update-quantity').on('change', function () {
            const url = $(this).data('url');
            const quantity = $(this).val();
            const csrfToken = '{{ csrf_token }}';
            if (quantity < 1) {
                alert('Quantity must be at least 1.');
                $(this).val(1);
                return;
            }
            $.ajax({
                url: url,
                type: 'POST',
                headers: { 'X-CSRFToken': csrfToken },
                data: { quantity: quantity },
                success: function (response) {
                    updateCartTotal(response.cart_total);
                    showNotification('Quantity updated!');
                },
                error: function () {
                    showNotification('Failed to update quantity.', true);
                }
            });
        });

        // Helper to update cart total
        function updateCartTotal(total) {
            $('#cart-total').text(`Total: $${total.toFixed(2)}`);
            if (total === 0) {
                $('#cart-content').html('<p class="text-center">Your cart is empty!</p>');
            }
        }

        // Popup Notification
        function showNotification(message, isError = false) {
            const notification = $('#popup-notification');
            notification.text(message);
            notification.css('background-color', isError ? '#f44336' : '#4CAF50');
            notification.fadeIn(300);
            setTimeout(function () {
                notification.fadeOut(300);
            }, 3000);
        }
    });
</script>
{% endblock %}


File: django/templates/account/account.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container mt-5">
    <!-- Account Details Section -->
    <div class="card mb-5 shadow-sm">
        <div class="card-body">
            <h2 class="card-title">Account Details</h2>
            <p><strong>Name:</strong> {{ account.name }}</p>
            <p><strong>Email:</strong> {{ account.email }}</p>
            <p><strong>Description:</strong> {{ account.description }}</p>
            <p><strong>JWT Token:</strong> <span class="jwt-token">{{ token }}</span></p>
            <p><strong>Email Confirmed:</strong> {{ account.email_confirmed }}</p>
            <p><strong>2FA Enabled:</strong> {{ account.mfa_enabled }}</p>
            {% if not account.email_confirmed %}
            <form method="GET" action="{% url 'confirm-email' %}">
                <button type="submit" class="btn btn-warning mt-2">Confirm Email</button>
            </form>
            {% endif %}
            {% if account.mfa_enabled %}
            <div class="mfa-section">
                <form method="POST" action="{% url 'disable-mfa' %}">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-danger mt-2">Disable MFA</button>
                </form>
            </div>
            {% else %}
            <div class="mfa-section">
                <img src="{{ qrcode }}" alt="QR Code" class="mt-3 img-fluid">
                <form method="GET" action="{% url 'enable-mfa' %}">
                    <button type="submit" class="btn btn-warning mt-2">Enable MFA</button>
                </form>
            </div>
            {% endif %}
            <form method="GET" action="{% url 'account-edit' %}">
                <button type="submit" class="btn btn-primary mt-3">Edit Details</button>
            </form>
        </div>
    </div>
    <!-- API Key Management Section -->
    <h2 class="mb-4">API Key Management</h2>
    <p>Manage your API keys and current subscription plan here.</p>
    <!-- API Keys Section -->
    <div class="mt-4">
        <h4>Your API Keys</h4>
        {% if api_keys %}
        <div class="table-responsive mt-3">
            <table class="table table-bordered table-hover">
                <thead class="thead-light">
                    <tr>
                        <th>Key ID</th>
                        <th>API Key</th>
                        <th>Primary</th>
                        <th>Credit Limit</th>
                        <th>Credits Used</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for key in api_keys %}
                    <tr>
                        <td>{{ key.id }}</td>
                        <td>
                            <div class="d-flex align-items-center">
                                <span id="api-key-{{ key.id }}" style="display: none;"></span>
                                <span id="api-key-masked-{{ key.id }}">••••••••••••</span>
                                <button type="button" class="btn btn-sm btn-secondary ms-2 reveal-button" data-key-id="{{ key.id }}" data-revealed="{{ key.revealed|yesno:'true,false' }}">
                                    Reveal
                                </button>
                            </div>
                        </td>
                        <td>
                            <button type="button" class="btn btn-warning btn-sm set-primary-button" data-key-id="{{ key.id }}">
                                {% if key.primary %}
                                Primary
                                {% else %}
                                Set as Primary
                                {% endif %}
                            </button>
                        </td>
                        <td>{{ key.credit_limit }}</td>
                        <td>{{ key.credits_used }}</td>
                        <td>
                            <button type="button" class="btn btn-primary btn-sm regenerate-button" data-key-id="{{ key.id }}">
                                Regenerate
                            </button>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {% else %}
        <p>No API keys found for your account.</p>
        {% endif %}
    </div>
    <!-- Generate New API Key -->
    <div class="mt-4">
        <form id="generate-api-key-form" method="POST" action="{% url 'api-key-generate' %}">
            {% csrf_token %}
            <input type="hidden" name="account_id" value="{{ account.id }}">
            <button type="button" id="generate-api-key-button" class="btn btn-success">Generate New API Key</button>
        </form>
    </div>
    <!-- Current Subscription Plan Section -->
    <div class="mt-5">
        <h4>Current Subscription Plan</h4>
        <div class="card shadow-sm">
            <div class="card-body">
                {% if current_plan %}
                <h5 class="card-title">{{ current_plan.name }}</h5>
                <p class="card-text">Cost: ${{ current_plan.amount }}</p>
                <p class="card-text">Billing Interval: {{ current_plan.interval }}</p>
                <p class="card-text">Status: {{ current_subscription.status }}</p>
                <form method="POST" action="{% url 'subscription-cancel' %}">
                    {% csrf_token %}
                    <input type="hidden" name="action" value="cancel_subscription">
                    <input type="hidden" name="subscription_id" value="{{ current_subscription.id }}">
                    <button type="submit" class="btn btn-danger">Cancel Subscription</button>
                </form>
                {% else %}
                <h5 class="card-title">No active subscription</h5>
                <p class="card-text">You can subscribe to a plan to unlock premium features.</p>
                {% endif %}
                <form method="GET" action="{% url 'plans-and-pricing' %}" style="display: inline;">
                    <button type="submit" class="btn btn-warning">View Plans</button>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    // JavaScript for handling API key actions
    document.addEventListener('DOMContentLoaded', function() {
        const generateApiKeyButton = document.getElementById('generate-api-key-button');
        generateApiKeyButton.addEventListener('click', function() {
            const form = document.getElementById('generate-api-key-form');
            const formData = new FormData(form);
            fetch(form.action, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': '{{ csrf_token }}'
                },
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.api_key) {
                    showNotification('API Key generated successfully.');
                    location.reload(); // Reload the page to reflect changes
                } else {
                    showNotification(data.error, true);
                }
            })
            .catch(error => {
                console.error('Error generating API key:', error);
                showNotification('An error occurred while generating the API key. Please try again later.', true);
            });
        });

        // Other JavaScript for handling API key actions...
    });

    function showNotification(message, isError = false) {
        const notification = document.getElementById('popup-notification');
        notification.textContent = message;
        notification.style.backgroundColor = isError ? '#f44336' : '#4CAF50';
        notification.style.display = 'block';
        setTimeout(() => {
            notification.style.display = 'none';
        }, 3000);
    }
</script>
{% endblock %}


File: django/templates/account/edit.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% load custom_filters %}

{% block content %}
<div class="container mt-5">
    <div class="card">
        <div class="card-body">
            <h2 class="card-title">Edit Account Details</h2>
            <form method="POST" action="{% url 'account-edit' %}">
                {% csrf_token %}
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" name="name" value="{{ account.name }}" required>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" name="email" value="{{ account.email }}" required>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <textarea class="form-control" id="description" name="description" rows="3">{{ account.description }}</textarea>
                </div>                
                <hr>
                <h5>Change Password (Optional)</h5>
                <div class="mb-3">
                    <label for="current_password" class="form-label">Current Password</label>
                    <input type="password" class="form-control" id="current_password" name="current_password" placeholder="Enter current password">
                </div>
                <div class="mb-3">
                    <label for="new_password" class="form-label">New Password</label>
                    <input type="password" class="form-control" id="new_password" name="new_password" placeholder="Enter new password">
                </div>
                <div class="mb-3">
                    <label for="confirm_password" class="form-label">Confirm New Password</label>
                    <input type="password" class="form-control" id="confirm_password" name="confirm_password" placeholder="Re-enter new password">
                </div>
                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary">Update Account</button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}



File: django/templates/authentication/register.html
----------------------------------------

{% extends 'widgets/base.html' %}
{% block content %}
<!-- Register Form Container -->
<div class="container">
    <h1>Register</h1>
    <form method="POST" action="{% url 'register' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input type="text" id="name" name="name" class="form-control" placeholder="Enter your full name" required>
        </div>
        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input type="text" id="username" name="username" class="form-control" placeholder="Choose a username" required>
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" id="email" name="email" class="form-control" placeholder="Enter your email" required>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" id="password" name="password" class="form-control" placeholder="Create a password" required>
        </div>
        <div class="mb-3">
            <label for="confirm_password" class="form-label">Confirm Password</label>
            <input type="password" id="confirm_password" name="confirm_password" class="form-control" placeholder="Confirm your password" required>
        </div>
        <div class="mb-3">
            <input type="checkbox" id="togglePassword" style="margin-top: 10px;"> Show Passwords
        </div>
        <div class="mb-3">
            <button type="submit" class="btn">Register</button>
        </div>
    </form>
</div>

<script>
    document.getElementById('togglePassword').addEventListener('change', function() {
        var passwordField = document.getElementById('password');
        var confirmPasswordField = document.getElementById('confirm_password');
        if (this.checked) {
            passwordField.type = 'text';
            confirmPasswordField.type = 'text';
        } else {
            passwordField.type = 'password';
            confirmPasswordField.type = 'password';
        }
    });
</script>
{% endblock %}


File: django/templates/authentication/login.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container">
    <h1>Login</h1>
    <form method="POST" action="{% url 'login' %}">
        {% csrf_token %}
        <div class="form-group">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email" placeholder="Enter your email" required>
        </div>
        <div class="form-group">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" id="password" name="password" placeholder="Enter your password" required>
            <input type="checkbox" id="togglePassword" style="margin-top: 10px;"> Show Password
        </div>
        <div class="form-group">
            <button type="submit">Login</button>
        </div>
    </form>
</div>

<script>
    document.getElementById('togglePassword').addEventListener('change', function() {
        var passwordField = document.getElementById('password');
        if (this.checked) {
            passwordField.type = 'text';
        } else {
            passwordField.type = 'password';
        }
    });
</script>
{% endblock %}


File: django/templates/authentication/enable-mfa.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container">
    <h1>Enable 2FA</h1>
    {% if not account.mfa_enabled %}
    <form method="POST" action="{% url 'enable-mfa' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="otp" class="form-label">One-Time Password (OTP)</label>
            <input type="text" class="form-control" id="otp" name="otp" placeholder="Enter OTP" required>
            <input type="hidden" id="account_id" name="account_id" value="{{ account.id }}" required>
        </div>
        <div class="d-grid">
            <button type="submit">Enable 2FA</button>
        </div>
    </form>
    {% else %}
    <p style="text-align: center; color: var(--primary-color); font-size: 1.2rem;">2FA Enabled Already!</p>
    {% endif %}
</div>
{% endblock %}


File: django/templates/authentication/confirm-email.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container">
    <h1>Confirm Email</h1>
    {% if not account.email_confirmed %}
    <form method="POST" action="{% url 'confirm-email' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="confirmation_secret" class="form-label">Confirmation Code</label>
            <input type="text" class="form-control" id="confirmation_secret" name="confirmation_secret" required>
        </div>
        <button type="submit">Confirm Email</button>
    </form>
    <form method="POST" action="{% url 'confirm-email' %}">
        {% csrf_token %}
        <input type="hidden" name="resend" value="true">
        <button type="submit">Resend Confirmation Code</button>
    </form>
    {% else %}
    <p class="message">Email Confirmed Already!</p>
    {% endif %}
</div>
{% endblock %}


File: django/templates/authentication/verify-mfa.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container">
    <h1>Verify MFA</h1>

    <form method="POST" action="{% url 'verify-mfa' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="otp" class="form-label">Enter OTP</label>
            <input type="text" class="form-control" id="otp" name="otp" required placeholder="Enter your one-time password">
            <input type="hidden" id="account_id" name="account_id" value="{{ account_id }}" required>
        </div>
        <button type="submit" class="btn">Verify OTP</button>
    </form>

    {% if error_message %}
        <div class="alert">
            {{ error_message }}
        </div>
    {% endif %}
</div>
{% endblock %}


File: django/templates/widgets/navbar.html
----------------------------------------
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="{% url 'index' %}">CleanSMRs</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'index' %}">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'products' %}">Products</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'plans-and-pricing' %}">Plans & Pricing</a>
                </li>

                {% if user.is_authenticated %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'cart' %}">Cart</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'account' %}">Account</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'subscriptions' %}">Subscriptions</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'orders' %}">Orders</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'observations' %}">Observations</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'observation-create' %}">Create Observations</a>
                    </li>
                    {% if user.is_superuser %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'product-create' %}">Create Product</a>
                        </li>
                    {% endif %}
                    <li class="nav-item">
                        <form method="POST" action="{% url 'logout' %}" class="d-inline">
                            {% csrf_token %}
                            <button type="submit" class="btn btn-link nav-link">Logout</button>
                        </form>
                    </li>
                {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'login' %}">Login</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'register' %}">Register</a>
                    </li>
                {% endif %}
            </ul>
        </div>
    </div>
</nav>


File: django/templates/widgets/base.html
----------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    {% load static %}
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}CleanSMRs{% endblock %}</title>
    <!-- Link to Bootswatch Zephyr theme -->
    <link rel="stylesheet" href="https://bootswatch.com/5/zephyr/bootstrap.rtl.min.css">
    <!-- Link to your custom CSS -->
    <link rel="stylesheet" href="{% static 'css/base.css' %}">
</head>
<body class="d-flex flex-column min-vh-100">
    {% include 'widgets/navbar.html' %}
    <main class="flex-fill">
        <div class="container">
            {% block content %}
            {% endblock %}
        </div>
    </main>
    {% include 'widgets/footer.html' %}
    <!-- Link to your custom JS -->
    <script src="{% static 'scripts/base.js' %}"></script>
</body>
</html>


File: django/templates/widgets/footer.html
----------------------------------------
<footer class="footer bg-light text-dark py-4">
    <div class="container">
        <div class="row">
            <div class="col-md-4 mb-3">
                <h4>About Us</h4>
                <p>CleanSMRs is committed to providing sustainable solutions. Learn more about us and our mission.</p>
                <a href="{% url 'about' %}" class="footer-link">Learn More</a>
            </div>
            <div class="col-md-4 mb-3">
                <h4>Quick Links</h4>
                <ul class="list-unstyled">
                    <li><a href="{% url 'contact' %}" class="footer-link">Contact</a></li>
                    <li><a href="{% url 'privacy-policy' %}" class="footer-link">Privacy Policy</a></li>
                    <li><a href="{% url 'terms-of-service' %}" class="footer-link">Terms of Service</a></li>
                    <li><a href="{% url 'support' %}" class="footer-link">Support</a></li>
                </ul>
            </div>
            <div class="col-md-4 mb-3">
                <h4>Stay Connected</h4>
                <p>Follow us on social media for the latest updates:</p>
                <div class="d-flex">
                    <a href="https://facebook.com" target="_blank" class="social-icon me-3">
                        <i class="bi bi-facebook"></i> Facebook
                    </a>
                    <a href="https://twitter.com" target="_blank" class="social-icon me-3">
                        <i class="bi bi-twitter"></i> X
                    </a>
                    <a href="https://linkedin.com" target="_blank" class="social-icon">
                        <i class="bi bi-linkedin"></i> Linkedin
                    </a>
                </div>
            </div>
        </div>
        <div class="footer-bottom text-center mt-3">
            <p>© 2024 CleanSMRs. All rights reserved.</p>
        </div>
    </div>
</footer>


File: django/templates/observation/update.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/templates/observation/observations.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container mt-5">
    <h2 class="text-center mb-4">Observations</h2>
    {% if observations %}
    <div class="table-responsive mt-4">
        <table class="table table-bordered table-hover">
            <thead class="thead-light">
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Coordinates</th>
                    <th>Air Temp (°C)</th>
                    <th>Water Temp (°C)</th>
                    <th>Humidity (%)</th>
                    <th>Wind Speed (m/s)</th>
                    <th>Wind Direction (°)</th>
                    <th>Precipitation (mm)</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                {% for observation in observations %}
                <tr>
                    <td>{{ observation.id }}</td>
                    <td>{{ observation.date }}</td>
                    <td>{{ observation.time }}</td>
                    <td>{{ observation.coordinates }}</td>
                    <td>{{ observation.temperature_air }}</td>
                    <td>{{ observation.temperature_water }}</td>
                    <td>{{ observation.humidity }}</td>
                    <td>{{ observation.wind_speed }}</td>
                    <td>{{ observation.wind_direction }}</td>
                    <td>{{ observation.precipitation }}</td>
                    <td>{{ observation.notes }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {% else %}
    <p class="text-center">{{ message|default:"No observations found." }}</p>
    {% endif %}
</div>
{% endblock %}


File: django/templates/observation/create.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
<div class="container mt-5">
    <h2 class="text-center mb-4">Create Observation</h2>
    {% if message %}
    <div class="alert alert-success">
        {{ message }}
    </div>
    {% elif error %}
    <div class="alert alert-danger">
        {{ error }}
    </div>
    {% endif %}
    <form action="{% url 'observation-create' %}" method="POST" class="needs-validation" novalidate>
        {% csrf_token %}
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="date" class="form-label">Date</label>
                <input type="date" id="date" name="date" class="form-control" required>
                <div class="invalid-feedback">
                    Please provide a valid date.
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <label for="time" class="form-label">Time</label>
                <input type="time" id="time" name="time" class="form-control" required>
                <div class="invalid-feedback">
                    Please provide a valid time.
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="time_zone_offset" class="form-label">Time Zone Offset</label>
                <input type="text" id="time_zone_offset" name="time_zone_offset" class="form-control" placeholder="UTC-05:00" required>
                <div class="invalid-feedback">
                    Please provide a valid time zone offset.
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <label for="latitude" class="form-label">Latitude</label>
                <input type="number" step="any" id="latitude" name="latitude" class="form-control" required>
                <div class="invalid-feedback">
                    Please provide a valid latitude.
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="longitude" class="form-label">Longitude</label>
                <input type="number" step="any" id="longitude" name="longitude" class="form-control" required>
                <div class="invalid-feedback">
                    Please provide a valid longitude.
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <label for="temperature_water" class="form-label">Water Temperature (°C)</label>
                <input type="number" step="any" id="temperature_water" name="temperature_water" class="form-control">
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="temperature_air" class="form-label">Air Temperature (°C)</label>
                <input type="number" step="any" id="temperature_air" name="temperature_air" class="form-control">
            </div>
            <div class="col-md-6 mb-3">
                <label for="humidity" class="form-label">Humidity (%)</label>
                <input type="number" step="any" id="humidity" name="humidity" class="form-control">
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="wind_speed" class="form-label">Wind Speed (m/s)</label>
                <input type="number" step="any" id="wind_speed" name="wind_speed" class="form-control">
            </div>
            <div class="col-md-6 mb-3">
                <label for="wind_direction" class="form-label">Wind Direction (°)</label>
                <input type="number" step="any" id="wind_direction" name="wind_direction" class="form-control">
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="precipitation" class="form-label">Precipitation (mm)</label>
                <input type="number" step="any" id="precipitation" name="precipitation" class="form-control">
            </div>
            <div class="col-md-6 mb-3">
                <label for="haze" class="form-label">Haze</label>
                <input type="number" step="any" id="haze" name="haze" class="form-control">
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="becquerel" class="form-label">Becquerel</label>
                <input type="number" step="any" id="becquerel" name="becquerel" class="form-control">
            </div>
            <div class="col-md-6 mb-3">
                <label for="notes" class="form-label">Notes</label>
                <textarea id="notes" name="notes" class="form-control" rows="3"></textarea>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>
<script>
    // Bootstrap validation
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            var forms = document.getElementsByClassName('needs-validation');
            Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>
{% endblock %}


File: django/templates/observation/observation.html
----------------------------------------
{% extends 'widgets/base.html' %}
{% block content %}
{% endblock %}


File: django/manage.py
----------------------------------------
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'system.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



File: django/pages/templatetags/custom_filters.py
----------------------------------------
from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)

@register.filter
def get_amount(item):
    # Check if the item has an 'amount' attribute (for Plan) or 'unit_amount' (for Price)
    return getattr(item, 'amount', None) or getattr(item, 'unit_amount', None)

@register.filter
def cart_total(cart_items):
    """
    Calculate the total cost of the cart.
    """
    return sum(
        item.quantity * item.product.prices.first().unit_amount for item in cart_items if item.product.prices.exists()
    )

@register.filter
def multiply(value, arg):
    try:
        return float(value) * float(arg)
    except (ValueError, TypeError):
        return 0

@register.filter
def currency(value):
    """Format a number as currency with commas and two decimal places."""
    try:
        # Convert from cents to main currency unit
        value = float(value) / 100
        return f"£{value:,.2f}"
    except (ValueError, TypeError):
        return value  # Return the original value if conversion fails

@register.filter
def sum_prices(items):
    return sum(item.price.unit_amount * item.quantity for item in items)


File: django/pages/templatetags/__init__.py
----------------------------------------



File: django/pages/migrations/0006_checkout_plan_checkoutlineitem.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 12:06

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0005_product_stock'),
    ]

    operations = [
        migrations.CreateModel(
            name='Checkout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mode', models.CharField(choices=[('payment', 'Payment'), ('setup', 'Setup'), ('subscription', 'Subscription')], default='payment', max_length=255)),
                ('payment_status', models.CharField(choices=[('no_payment_required', 'No Payment Required'), ('paid', 'Paid'), ('unpaid', 'Unpaid')], default='unpaid', max_length=255)),
                ('status', models.CharField(choices=[('complete', 'Complete'), ('expired', 'Expired'), ('open', 'Open')], max_length=255, null=True)),
                ('stripe_checkout_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('success_url', models.CharField(max_length=255)),
                ('return_url', models.CharField(max_length=255)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checkouts', to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id')),
            ],
            options={
                'db_table': 'pages_checkout',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('currency', models.CharField(max_length=3)),
                ('interval', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('stripe_plan_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plans', to='pages.product', to_field='stripe_product_id')),
            ],
            options={
                'db_table': 'pages_plan',
            },
        ),
        migrations.CreateModel(
            name='CheckoutLineItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('checkout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkout_line_items', to='pages.checkout')),
                ('price', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checkout_line_items', to='pages.price', to_field='stripe_price_id')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checkout_line_items', to='pages.plan', to_field='stripe_plan_id')),
            ],
            options={
                'db_table': 'pages_checkout_line_item',
            },
        ),
    ]



File: django/pages/migrations/0009_subscriptionitem.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 14:52

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0008_alter_order_table_alter_orderitem_table'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubscriptionItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('stripe_subscription_item_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscription_items', to='pages.plan', to_field='stripe_plan_id')),
                ('price', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscription_items', to='pages.price', to_field='stripe_price_id')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_items', to='pages.subscription')),
            ],
            options={
                'db_table': 'pages_subscription_item',
            },
        ),
    ]



File: django/pages/migrations/__init__.py
----------------------------------------



File: django/pages/migrations/0005_product_stock.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 11:56

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0004_alter_cart_customer'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='stock',
            field=models.IntegerField(default=1),
        ),
    ]



File: django/pages/migrations/0008_alter_order_table_alter_orderitem_table.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 13:06

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0007_order_orderitem'),
    ]

    operations = [
        migrations.AlterModelTable(
            name='order',
            table='pages_order',
        ),
        migrations.AlterModelTable(
            name='orderitem',
            table='pages_order_item',
        ),
    ]



File: django/pages/migrations/0002_product_account_mfa_confirmed_apikey_cart_price_and_more.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 11:39

import django.db.models.deletion
import django.utils.timezone
import secrets
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('good', 'Good'), ('service', 'Service')], default='good', max_length=255)),
                ('reoccurrence', models.CharField(choices=[('one-time', 'One Time'), ('reoccurring', 'Re-Occurring')], default='one-time', max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('stripe_product_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pages_product',
            },
        ),
        migrations.AddField(
            model_name='account',
            name='mfa_confirmed',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(default=secrets.token_urlsafe, max_length=50, unique=True)),
                ('active', models.BooleanField(default=True)),
                ('revealed', models.BooleanField(default=False)),
                ('primary', models.BooleanField(default=False)),
                ('credit_limit', models.PositiveIntegerField(default=1000)),
                ('credits_used', models.PositiveIntegerField(default=0)),
                ('reset_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pages_api_key',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id')),
            ],
            options={
                'db_table': 'pages_cart',
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('currency', models.CharField(max_length=3)),
                ('recurring', models.JSONField(max_length=1024, null=True)),
                ('unit_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('stripe_price_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='pages.product', to_field='stripe_product_id')),
            ],
            options={
                'db_table': 'pages_price',
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='pages.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.product', to_field='stripe_product_id')),
            ],
            options={
                'db_table': 'pages_cart_item',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='product/images/')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='pages.product')),
            ],
            options={
                'db_table': 'pages_product_image',
            },
        ),
        migrations.CreateModel(
            name='ProductVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(blank=True, null=True, upload_to='product/videos/')),
                ('video_url', models.URLField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='pages.product')),
            ],
            options={
                'db_table': 'pages_product_video',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('incomplete', 'incomplete'), ('incomplete_expired', 'incomplete_expired'), ('trialing', 'trialing'), ('active', 'active'), ('past_due', 'past_due'), ('canceled', 'canceled'), ('unpaid', 'unpaid'), ('paused', 'paused')], default=None, max_length=255)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id')),
            ],
            options={
                'db_table': 'pages_subscription',
            },
        ),
    ]



File: django/pages/migrations/0004_alter_cart_customer.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 11:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0003_alter_cart_customer'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cart',
            name='customer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id'),
        ),
    ]



File: django/pages/migrations/0007_order_orderitem.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 13:03

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0006_checkout_plan_checkoutlineitem'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('checkout', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.checkout', to_field='stripe_checkout_id')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.order')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.plan', to_field='stripe_plan_id')),
                ('price', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.price', to_field='stripe_price_id')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='pages.product', to_field='stripe_product_id')),
            ],
        ),
    ]



File: django/pages/migrations/0003_alter_cart_customer.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 11:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0002_product_account_mfa_confirmed_apikey_cart_price_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cart',
            name='customer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='carts', to=settings.AUTH_USER_MODEL, to_field='stripe_customer_id'),
        ),
    ]



File: django/pages/migrations/0001_initial.py
----------------------------------------
# Generated by Django 5.1.4 on 2025-01-10 02:07

import django.contrib.auth.models
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('email_confirmation_secret', models.CharField(blank=True, max_length=16, null=True)),
                ('email_confirmed', models.BooleanField(default=False)),
                ('mfa_secret', models.CharField(blank=True, max_length=16, null=True)),
                ('mfa_enabled', models.BooleanField(default=False)),
                ('password', models.CharField(max_length=255)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'pages_account',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]



File: django/pages/models.py
----------------------------------------
from .classes.account.model import *
from .classes.authentication.model import *
from .classes.system.model import *
from .classes.product.model import *
from .classes.plan.model import *
from .classes.price.model import *
from .classes.subscription.model import *
from .classes.cart.model import *
from .classes.checkout.model import *
from .classes.api.model import *
from .classes.order.model import *
from .classes.observation.model import *
from .classes.webhook.model import *


File: django/pages/config/config.py
----------------------------------------
import stripe, os

STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')

stripe.api_key = STRIPE_SECRET_KEY


File: django/pages/config/__init__.py
----------------------------------------



File: django/pages/classes/webhook/signal.py
----------------------------------------



File: django/pages/classes/webhook/__init__.py
----------------------------------------



File: django/pages/classes/webhook/model.py
----------------------------------------



File: django/pages/classes/webhook/form.py
----------------------------------------



File: django/pages/classes/webhook/view.py
----------------------------------------
from django.shortcuts import render, redirect
from django.utils.timezone import now, timedelta
from rest_framework.views import APIView
from rest_framework.response import Response
from ...config.config import stripe
from django.conf import settings
from ...models import Account, Order, Price, Product, OrderItem, Subscription, SubscriptionItem, Plan
import random, string
from django.core.mail import send_mail
from django.http import JsonResponse
import logging



logger = logging.getLogger(__name__)
class WebhookView(APIView):
    def post(self, request):
        payload = request.body
        sig_header = request.headers.get('Stripe-Signature')
        endpoint_secret = settings.STRIPE_WEBHOOK_SECRET

        try:
            event = stripe.Webhook.construct_event(
                payload, sig_header, endpoint_secret
            )
        except ValueError as e:
            logger.error(f"Invalid payload: {e}")
            return Response({"error": "Invalid payload"}, status=400)
        except stripe.error.SignatureVerificationError as e:
            logger.error(f"Invalid signature: {e}")
            return Response({"error": "Invalid signature"}, status=400)

        # Handle the event
        if event['type'] == 'checkout.session.completed':
            self.handle_checkout_session_completed(event)
        elif event['type'] == 'customer.subscription.created':
            self.handle_subscription_created(event)
        elif event['type'] == 'customer.subscription.updated':
            self.handle_subscription_updated(event)
        elif event['type'] == 'customer.subscription.deleted':
            self.handle_subscription_deleted(event)
        else:
            logger.warning(f"Unhandled event type: {event['type']}")

        # Return a success response for handled events
        return Response({"message": "Webhook processed successfully"}, status=200)

    def handle_checkout_session_completed(self, event):
        session = event['data']['object']
        customer_id = session['customer']
        checkout_id = session['id']
        payment_status = session['payment_status']
        line_items = stripe.checkout.Session.list_line_items(checkout_id)

        if payment_status == 'paid':
            try:
                account = Account.objects.get(stripe_customer_id=customer_id)
                subscription = Subscription.objects.create(
                    customer=account,
                    stripe_subscription_id=session['subscription'],
                    status='active'
                )
                for item in line_items['data']:
                    plan_id = item['price']['id']
                    price_id = item['price']['id']
                    quantity = item['quantity']
                    plan = Plan.objects.get(stripe_plan_id=plan_id)
                    price = Price.objects.get(stripe_price_id=price_id)
                    SubscriptionItem.objects.create(
                        subscription=subscription,
                        plan=plan,
                        price=price,
                        quantity=quantity
                    )
                logger.info(f"Subscription created successfully for customer {account.email}")
            except Account.DoesNotExist:
                logger.error(f"Customer not found for checkout: {customer_id}")
                return Response({"error": "Customer not found"}, status=404)
            except Exception as e:
                logger.error(f"Error creating subscription: {e}")
                return Response({"error": f"Error creating subscription: {e}"}, status=500)

    def handle_subscription_created(self, event):
        subscription_data = event['data']['object']
        customer_id = subscription_data['customer']
        subscription_id = subscription_data['id']
        status = subscription_data['status']

        try:
            account = Account.objects.get(stripe_customer_id=customer_id)
            subscription = Subscription.objects.create(
                customer=account,
                stripe_subscription_id=subscription_id,
                status=status
            )
            for item in subscription_data['items']['data']:
                price_id = item['price']['id']
                quantity = item['quantity']
                price = Price.objects.get(stripe_price_id=price_id)
                SubscriptionItem.objects.create(
                    subscription=subscription,
                    price=price,
                    quantity=quantity,
                    stripe_subscription_item_id=item['id']
                )
            logger.info(f"Subscription created successfully for customer {account.email}")
        except Account.DoesNotExist:
            logger.error(f"Customer not found for subscription: {customer_id}")
            return Response({"error": "Customer not found"}, status=404)
        except Exception as e:
            logger.error(f"Error creating subscription: {e}")
            return Response({"error": f"Error creating subscription: {e}"}, status=500)

    def handle_subscription_updated(self, event):
        subscription_data = event['data']['object']
        subscription_id = subscription_data['id']
        status = subscription_data['status']

        try:
            subscription = Subscription.objects.get(stripe_subscription_id=subscription_id)
            subscription.status = status
            subscription.save()
            logger.info(f"Subscription updated successfully for subscription ID {subscription_id}")
        except Subscription.DoesNotExist:
            logger.error(f"Subscription not found: {subscription_id}")
            return Response({"error": "Subscription not found"}, status=404)
        except Exception as e:
            logger.error(f"Error updating subscription: {e}")
            return Response({"error": f"Error updating subscription: {e}"}, status=500)

    def handle_subscription_deleted(self, event):
        subscription_data = event['data']['object']
        subscription_id = subscription_data['id']

        try:
            subscription = Subscription.objects.get(stripe_subscription_id=subscription_id)
            subscription.deleted = now()
            subscription.save()
            logger.info(f"Subscription deleted successfully for subscription ID {subscription_id}")
        except Subscription.DoesNotExist:
            logger.error(f"Subscription not found: {subscription_id}")
            return Response({"error": "Subscription not found"}, status=404)
        except Exception as e:
            logger.error(f"Error deleting subscription: {e}")
            return Response({"error": f"Error deleting subscription: {e}"}, status=500)
    
    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for WebhookView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/webhook/admin.py
----------------------------------------



File: django/pages/classes/webhook/serializer.py
----------------------------------------



File: django/pages/classes/order/signal.py
----------------------------------------



File: django/pages/classes/order/__init__.py
----------------------------------------



File: django/pages/classes/order/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from django.utils.timezone import now
from django.contrib.auth.models import AbstractUser
from django.core.mail import send_mail
from ...config.config import stripe
from system.settings import DEFAULT_FROM_EMAIL, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD

from ...models import Account, Price, Plan, Product, Checkout

class Order(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer = models.ForeignKey(Account, to_field='stripe_customer_id', on_delete=models.CASCADE)
    checkout = models.ForeignKey(
        Checkout, 
        to_field='stripe_checkout_id', 
        on_delete=models.CASCADE, 
        related_name='order_items',
        null=True
    )
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)
    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_order"

class OrderItem(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    order = models.ForeignKey(Order, related_name='order_items', on_delete=models.CASCADE)
    product = models.ForeignKey(
        Product, 
        to_field='stripe_product_id', 
        on_delete=models.CASCADE, 
        related_name='order_items',
        null=True
    )
    price = models.ForeignKey(
        Price, 
        to_field='stripe_price_id', 
        on_delete=models.CASCADE, 
        related_name='order_items',
        null=True
    )
    plan = models.ForeignKey(
        Plan, 
        to_field='stripe_plan_id', 
        on_delete=models.CASCADE, 
        related_name='order_items',
        null=True
    )
    quantity = models.PositiveIntegerField(default=1)
    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_order_item"


File: django/pages/classes/order/form.py
----------------------------------------



File: django/pages/classes/order/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from ...models import Order, Account

class OrderView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            account = self.authenticate_user(request)
            user = request.user
            account = Account.objects.filter(id=user.id).first()
            # Fetch all orders for the user
            orders = Order.objects.filter(customer=account.stripe_customer_id).select_related(
                'customer'
            ).prefetch_related('order_items__product', 'order_items__price', 'order_items__plan')
            # Handle GET requests
            return render(request, 'order/orders.html', {"orders": orders})
        except Exception as e:
            message = f"'GET' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for OrderView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class OrdersView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Fetch orders for the authenticated user
            if request.user.is_authenticated:
                orders = Order.objects.filter(customer=request.user)
            else:
                orders = []

            # Render the orders template with the orders context
            return render(request, 'order/orders.html', {'orders': orders})
        except Exception as e:
            message = f"'GET' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for OrdersView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/order/admin.py
----------------------------------------



File: django/pages/classes/order/serializer.py
----------------------------------------



File: django/pages/classes/plan/signal.py
----------------------------------------



File: django/pages/classes/plan/__init__.py
----------------------------------------



File: django/pages/classes/plan/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from ...models import Product
from django.utils.timezone import now

class Plan(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    currency = models.CharField(max_length=3)
    interval = models.CharField(max_length=255) 
    product = models.ForeignKey(Product, to_field='stripe_product_id', on_delete=models.CASCADE, related_name='plans')
    amount = models.DecimalField(default=0.00, max_digits=10, decimal_places=2)
    stripe_plan_id = models.CharField(max_length=255, blank=True, unique=True, null=True)  # Stripe product ID
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    # Methods
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        super().delete(*args, **kwargs)

    # Meta Class
    class Meta:
        db_table = "pages_plan"


File: django/pages/classes/plan/form.py
----------------------------------------



File: django/pages/classes/plan/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response

class PlanView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PlanView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    

class PlansView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PlansView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/plan/admin.py
----------------------------------------



File: django/pages/classes/plan/serializer.py
----------------------------------------



File: django/pages/classes/__init__.py
----------------------------------------



File: django/pages/classes/product/signal.py
----------------------------------------



File: django/pages/classes/product/__init__.py
----------------------------------------



File: django/pages/classes/product/model.py
----------------------------------------
import uuid
from django.db import models
from django.utils.timezone import now
from ...config.config import stripe
class Product(models.Model):
    PRODUCT_TYPE_CHOICES = [
        ('good', 'Good'),
        ('service', 'Service'),
    ]
    PRODUCT_REOCCURRENCE_CHOICES = [
        ('one-time', 'One Time'),
        ('reoccurring', 'Re-Occurring'),
    ]
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255)
    type = models.CharField(max_length=255, choices=PRODUCT_TYPE_CHOICES, default='good')
    reoccurrence = models.CharField(max_length=255, choices=PRODUCT_REOCCURRENCE_CHOICES, default='one-time')
    description = models.TextField(blank=True, null=True)
    stripe_product_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    stock = models.IntegerField(default=1)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def create_stripe_product(self):
        """Creates a Stripe product and stores the product ID."""
        try:
            # Create a new Stripe product
            product = stripe.Product.create(
                name=self.name,
                type=self.type,
                description=self.description or None,
            )
            # Store the Stripe product ID in the product
            self.stripe_product_id = product.id
            self.save()
            return product
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to create Stripe product: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to create Stripe product: {e}")

    def update_stripe_product(self, **kwargs):
        """Updates the Stripe product with the provided details."""
        if not self.stripe_product_id:
            raise Exception("Stripe product ID not set for this product.")

        try:
            # Update the Stripe product
            product = stripe.Product.modify(
                self.stripe_product_id,
                **kwargs
            )
            # Optionally update local fields if needed
            if 'name' in kwargs:
                self.name = kwargs['name']
            if 'description' in kwargs:
                self.description = kwargs['description']
            self.save()
            return product
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to update Stripe product: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to update Stripe product: {e}")
    
    def delete_stripe_product(self):
        """Deletes the Stripe product associated with this product."""
        if not self.stripe_product_id:
            raise Exception("Stripe product ID not set for this product.")

        try:
            # Delete the Stripe product
            stripe.Product.delete(self.stripe_product_id)

            # Optionally, clear the stripe_product_id field
            self.stripe_product_id = None
            self.save()
            print("Stripe product deleted successfully.")
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to delete Stripe product: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to delete Stripe product: {e}")
        
    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_product"
    
class ProductImage(models.Model):
    product = models.ForeignKey(Product, related_name='images', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='product/images/', blank=True, null=True)
    image_url = models.URLField(blank=True, null=True)  # For external image URLs
    uploaded_at = models.DateTimeField(auto_now_add=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def create_product_image(product, image=None, image_url=None):
        """Creates a new ProductImage."""
        product_image = ProductImage.objects.create(
            product=product,
            image=image,
            image_url=image_url
        )
        return product_image
    
    def update_product_image(product_image, image=None, image_url=None):
        """Updates an existing ProductImage."""
        if image is not None:
            product_image.image = image
        if image_url is not None:
            product_image.image_url = image_url
        product_image.save()
        return product_image

    def delete_product_image(product_image):
        """Deletes a ProductImage."""
        # product_image.deleted = now()
        # product_image.save()
        # Alternatively, to permanently delete:
        product_image.delete()


    def __str__(self):
        return str(self.id)
    
    # Meta Class
    class Meta:
        db_table = "pages_product_image"


class ProductVideo(models.Model):
    product = models.ForeignKey(Product, related_name='videos', on_delete=models.CASCADE)
    video = models.FileField(upload_to='product/videos/', blank=True, null=True)
    video_url = models.URLField(blank=True, null=True)  # For external image URLs
    uploaded_at = models.DateTimeField(auto_now_add=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def create_product_video(product, video=None, video_url=None):
        """Creates a new ProductVideo."""
        product_video = ProductVideo.objects.create(
            product=product,
            video=video,
            video_url=video_url
        )
        return product_video

    def update_product_video(product_video, video=None, video_url=None):
        """Updates an existing ProductVideo."""
        if video is not None:
            product_video.video = video
        if video_url is not None:
            product_video.video_url = video_url
        product_video.save()
        return product_video

    def delete_product_video(product_video):
        """Deletes a ProductVideo."""
        # product_video.deleted = now()
        # product_video.save()
        # Alternatively, to permanently delete:
        product_video.delete()


    def __str__(self):
        return str(self.id)
    
    # Meta Class
    class Meta:
        db_table = "pages_product_video"



File: django/pages/classes/product/form.py
----------------------------------------
from django import forms
from ...models import Product, ProductImage, ProductVideo
class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['name', 'type', 'reoccurrence', 'description']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter product name'}),
            'type': forms.Select(attrs={'class': 'form-control'}),
            'reoccurrence': forms.Select(attrs={'class': 'form-control'}),
            'description': forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Enter product description', 'rows': 3}),
        }
        
class ProductImageForm(forms.ModelForm):
    class Meta:
        model = ProductImage
        fields = ['image', 'image_url']
        widgets = {
            'image': forms.ClearableFileInput(attrs={'class': 'form-control'}),
            'image_url': forms.URLInput(attrs={'class': 'form-control', 'placeholder': 'Enter external image URL'}),
        }

class ProductVideoForm(forms.ModelForm):
    class Meta:
        model = ProductVideo
        fields = ['video', 'video_url']
        widgets = {
            'video': forms.ClearableFileInput(attrs={'class': 'form-control'}),
            'video_url': forms.URLInput(attrs={'class': 'form-control', 'placeholder': 'Enter external video URL'}),
        }


File: django/pages/classes/product/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from django.shortcuts import render, redirect, get_object_or_404
from django.utils.timezone import now
# from ...models import Product
from ...models import Product, ProductImage, ProductVideo, Price
from ...forms import ProductForm, ProductImageForm, ProductVideoForm  # Assume you have these forms

class ProductView(APIView):
    def post(self, request, product_id=None):
        try:
            if product_id:
                # Check if the action is to delete the product
                if request.POST.get('action') == 'delete':
                    product = get_object_or_404(Product, id=product_id)
                    product.delete_stripe_product()  # Delete from Stripe
                    product.delete()  # Delete from local database
                    message = "Product deleted successfully."
                    is_error = False
                    status_code = 200
                    return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

                # Update existing product
                product = get_object_or_404(Product, id=product_id)
                form = ProductForm(request.POST, request.FILES, instance=product)
            else:
                # Create new product
                form = ProductForm(request.POST, request.FILES)

            if form.is_valid():
                product = form.save()

                # Handle image uploads
                for image in request.FILES.getlist('images'):
                    ProductImage.objects.create(product=product, image=image)

                # Handle video uploads
                for video in request.FILES.getlist('videos'):
                    ProductVideo.objects.create(product=product, video=video)

                # Create product in Stripe if it doesn't already exist
                if not product.stripe_product_id:
                    product.create_stripe_product()

                # Handle price creation
                price_amount = request.POST.get('price_amount')
                price_currency = request.POST.get('price_currency', 'usd')
                price_interval = request.POST.get('price_interval', 'one_time')

                if price_amount:  # Only create a price if the amount is provided
                    recurring = (
                        {"interval": price_interval}
                        if price_interval in ["month", "year"]
                        else None
                    )
                    try:
                        # Create a local Price instance
                        price = Price.objects.create(
                            product=product,
                            unit_amount=float(price_amount),
                            currency=price_currency,
                            recurring=recurring,
                        )

                        # Create the Stripe price and save the Stripe ID
                        price.create_stripe_price()

                    except Exception as e:
                        print(f"Error creating price: {e}")
                        message = f"Failed to create price: {e}"
                        is_error = True
                        status_code = 500
                        return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

                message = "Product and price saved successfully."
                is_error = False
                status_code = 201
            else:
                print("Form errors:", form.errors)
                message = "Form is not valid."
                is_error = True
                status_code = 400

            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    # def post(self, request, product_id=None):
    #     try:
    #         if product_id:
    #             # Check if the action is to delete the product
    #             if request.POST.get('action') == 'delete':
    #                 product = get_object_or_404(Product, id=product_id)
    #                 product.delete_stripe_product()  # Delete from Stripe
    #                 product.delete()  # Delete from local database
    #                 message = "Product deleted successfully."
    #                 is_error = False
    #                 status_code = 200
    #                 return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    #             # Update existing product
    #             product = get_object_or_404(Product, id=product_id)
    #             form = ProductForm(request.POST, request.FILES, instance=product)
    #         else:
    #             # Create new product
    #             form = ProductForm(request.POST, request.FILES)

    #         if form.is_valid():
    #             product = form.save()

    #             # Handle image uploads
    #             for image in request.FILES.getlist('images'):
    #                 ProductImage.objects.create(product=product, image=image)

    #             # Handle video uploads
    #             for video in request.FILES.getlist('videos'):
    #                 ProductVideo.objects.create(product=product, video=video)

    #             # Create product in Stripe if it doesn't already exist
    #             if not product.stripe_product_id:
    #                 product.create_stripe_product()

    #             message = "Product saved successfully."
    #             is_error = False
    #             status_code = 201
    #         else:
    #             print("Form errors:", form.errors)
    #             message = "Form is not valid."
    #             is_error = True
    #             status_code = 400

    #         return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    #     except Exception as e:
    #         message = f"'POST' Method Failed for ProductView: {e}"
    #         is_error = True
    #         status_code = 500
    #         return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    
    def get(self, request, product_id=None):
        try:
            if product_id:
                # Editing an existing product
                product = get_object_or_404(Product, id=product_id)
                form = ProductForm(instance=product)
                images = ProductImage.objects.filter(product=product)
                videos = ProductVideo.objects.filter(product=product)
            else:
                # Creating a new product
                form = ProductForm()
                images = None
                videos = None

            return render(request, 'product/create.html', {
                'form': form,
                'images': images,
                'videos': videos,
                'product': product if product_id else None
            })
        except Exception as e:
            message = f"'GET' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request, product_id):
        try:
            product = get_object_or_404(Product, id=product_id)
            product.delete()
            message = "Product deleted successfully."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ProductView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class ProductsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Filter products to show only goods
            products = Product.objects.filter(deleted__isnull=True, type='good')
            return render(request, 'product/products.html', {'products': products})
        except Exception as e:
            message = f"'GET' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request, product_id):
        try:
            product = get_object_or_404(Product, id=product_id)
            product.deleted = now()
            product.save()
            message = "Product deleted successfully."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ProductsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/product/admin.py
----------------------------------------



File: django/pages/classes/product/serializer.py
----------------------------------------



File: django/pages/classes/checkout/signal.py
----------------------------------------



File: django/pages/classes/checkout/__init__.py
----------------------------------------



File: django/pages/classes/checkout/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from django.utils.timezone import now
from django.contrib.auth.models import AbstractUser
from django.core.mail import send_mail
from ...config.config import stripe
from system.settings import DEFAULT_FROM_EMAIL, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD

from ...models import Account, Price, Plan

class Checkout(models.Model):
    CHECKOUT_MODE_CHOICES = [
        ('payment', 'Payment'),
        ('setup', 'Setup'),
        ('subscription', 'Subscription')
    ]
    CHECKOUT_PAYMENT_STATUS_CHOICES = [
        ('no_payment_required', 'No Payment Required'),
        ('paid', 'Paid'),
        ('unpaid', 'Unpaid')
    ]
    CHECKOUT_STATUS_CHOICES = [
        ('complete', 'Complete'),
        ('expired', 'Expired'),
        ('open', 'Open')
    ]
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer = models.ForeignKey(Account, to_field='stripe_customer_id', on_delete=models.CASCADE,related_name='checkouts', null=True)
    mode = models.CharField(max_length=255, choices=CHECKOUT_MODE_CHOICES, default='payment')
    payment_status = models.CharField(max_length=255, choices=CHECKOUT_PAYMENT_STATUS_CHOICES, default='unpaid')
    status = models.CharField(max_length=255, choices=CHECKOUT_STATUS_CHOICES, null=True)
    stripe_checkout_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    success_url = models.CharField(max_length=255)
    return_url = models.CharField(max_length=255)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def add_item(self, price_id=None, plan_id=None, quantity=1):
        """
        Add a CheckoutLineItem to the checkout or update its quantity if it already exists.
        Either price_id or plan_id must be provided.
        """
        from ...models import Price, Plan  # Avoid circular imports

        if not price_id and not plan_id:
            raise ValueError("Either 'price_id' or 'plan_id' must be provided.")

        # Retrieve the price or plan
        if price_id:
            price = Price.objects.get(stripe_price_id=price_id)
        else:
            price = None

        if plan_id:
            plan = Plan.objects.get(stripe_plan_id=plan_id)
        else:
            plan = None

        # Check if the item already exists based on provided parameters
        checkout_item, created = self.checkout_line_items.get_or_create(
            price=price,  # Use the non-None value
            plan=plan,
            defaults={'quantity': quantity}
        )

        if not created:
            # Update the quantity if the item already exists
            checkout_item.quantity += quantity
            checkout_item.save()

        return checkout_item


    def update_item_quantity(self, price_id, quantity):
        """
        Update the quantity of a specific CheckoutLineItem in the checkout.
        """
        checkout_item = self.checkout_line_items.filter(price__stripe_price_id=price_id).first()
        if not checkout_item:
            raise ValueError("checkout item does not exist.")

        if quantity > 0:
            checkout_item.quantity = quantity
            checkout_item.save()
        else:
            checkout_item.delete()

        return checkout_item

    def remove_item(self, price_id):
        """
        Remove a CheckoutLineItem from the checkout.
        """
        checkout_item = self.checkout_line_items.filter(price__stripe_price_id=price_id).first()
        if checkout_item:
            checkout_item.delete()
        else:
            raise ValueError("checkout item does not exist.")

    def clear_items(self):
        """
        Remove all CheckoutLineItems from the checkout.
        """
        self.checkout_line_items.all().delete()

    def get_items(self):
        """
        Retrieve all CheckoutLineItems for this checkout.
        """
        return self.checkout_line_items.all()


    def create_stripe_session(self):
        """
        Create a Stripe Checkout Session for this checkout instance.
        """
        try:
            # Collect line items for the checkout session
            line_items = []
            for item in self.checkout_line_items.all():
                if item.price:  # If a price is associated
                    line_items.append({
                        "price": item.price.stripe_price_id,
                        "quantity": item.quantity,
                    })
                elif item.plan:  # If a plan is associated
                    line_items.append({
                        "price": item.plan.stripe_plan_id,
                        "quantity": item.quantity,
                    })
            print(f"line_items: ${line_items}")

            # Create the Stripe Checkout session
            session = stripe.checkout.Session.create(
                payment_method_types=["card"],
                mode=self.mode,  # Mode can be 'payment', 'setup', or 'subscription'
                line_items=line_items,
                success_url=self.success_url,
                cancel_url=self.return_url,
                customer=self.customer.stripe_customer_id if self.customer else None,
                currency="usd",  # Ensure Euro handling
            )

            # Save the session ID and update status
            self.stripe_checkout_id = session.id
            self.status = "open"
            self.save()

            return session.url  # Return the Stripe Checkout session URL

        except Exception as e:
            raise Exception(f"Error creating Stripe Checkout Session: {e}")
        

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_checkout"

class CheckoutLineItem(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    checkout = models.ForeignKey(Checkout, related_name='checkout_line_items', on_delete=models.CASCADE)
    price = models.ForeignKey(
        Price, 
        to_field='stripe_price_id', 
        on_delete=models.CASCADE, 
        related_name='checkout_line_items',
        null=True
    )
    plan = models.ForeignKey(
        Plan, 
        to_field='stripe_plan_id', 
        on_delete=models.CASCADE, 
        related_name='checkout_line_items',
        null=True
    )
    quantity = models.PositiveIntegerField(default=1)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)


    def update_quantity(self, quantity):
        """
        Update the quantity of this checkout item.
        """
        if quantity > 0:
            self.quantity = quantity
            self.save()
        else:
            self.delete()

    def remove(self):
        """
        Remove this checkout item from the checkout.
        """
        self.delete()

    # Meta Class
    class Meta:
        db_table = "pages_checkout_line_item"


File: django/pages/classes/checkout/form.py
----------------------------------------



File: django/pages/classes/checkout/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from ...models import Checkout, CheckoutLineItem, Account, Cart, Subscription, Plan, Price
from ...config.config import stripe
def handle_response(message, is_error=False, status_code=200):
    return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
class CheckoutView(APIView):

    def post(self, request):
        try:
            account = request.user
            if not account.is_authenticated:
                return handle_response("User is not authenticated.", is_error=True, status_code=401)

            # Check the request path
            if request.path == '/checkout/subscribe':
                return self.handle_subscription(request, account)
            elif request.path == '/checkout/upgrade':
                return self.handle_upgrade(request, account)
            else:
                return self.handle_cart_checkout(request, account)
        except Exception as e:
            return handle_response(f"Failed to process request: {str(e)}", is_error=True, status_code=500)

    def handle_subscription(self, request, account):
        try:
            # Check if the user already has an active subscription
            active_subscription = Subscription.objects.filter(
                customer=account,
                status__in=['active', 'trialing']
            ).first()
            if active_subscription:
                return handle_response(
                    "You already have an active subscription. Please wait until it ends to subscribe to a new plan.",
                    is_error=True,
                    status_code=400
                )

            # Retrieve plan_id or price_id from the request
            plan_id = request.data.get('plan_id')
            price_id = request.data.get('price_id')
            print(f"Plan ID: {plan_id}, Price ID: {price_id}")

            if not plan_id and not price_id:
                return handle_response("Either Plan ID or Price ID is required.", is_error=True, status_code=400)

            # Create a new Checkout instance
            checkout = Checkout.objects.create(
                success_url=request.build_absolute_uri('/checkout/success/'),
                return_url=request.build_absolute_uri('/checkout/failure/'),
                mode='subscription',
                customer=account
            )

            # Add the item to the Checkout
            if plan_id:
                # Check if the plan_id is actually a price_id
                try:
                    plan = Plan.objects.get(stripe_plan_id=plan_id)
                    checkout.add_item(plan_id=plan.stripe_plan_id, quantity=1)
                except Plan.DoesNotExist:
                    # If no Plan is found, try to find a Price
                    price = get_object_or_404(Price, stripe_price_id=plan_id)
                    checkout.add_item(price_id=price.stripe_price_id, quantity=1)
            elif price_id:
                price = get_object_or_404(Price, stripe_price_id=price_id)
                checkout.add_item(price_id=price.stripe_price_id, quantity=1)

            # Create or update the Stripe checkout
            checkout.create_stripe_session()

            # Redirect user to the checkout
            stripe_checkout_url = stripe.checkout.Session.retrieve(checkout.stripe_checkout_id)['url']
            return redirect(stripe_checkout_url)

        except Exception as e:
            return handle_response(f"Failed to handle subscription: {str(e)}", is_error=True, status_code=500)


    def handle_upgrade(self, request, account):
        try:
            new_plan_id = request.data.get('plan_id')
            if not new_plan_id:
                return handle_response("Plan ID is required for upgrade.", is_error=True, status_code=400)

            # Check for an active subscription
            active_subscription = Subscription.objects.filter(
                customer=account,
                status__in=['active', 'trialing']
            ).first()
            if not active_subscription:
                return handle_response("No active subscription found to upgrade.", is_error=True, status_code=400)

            # Retrieve the new plan
            new_plan = get_object_or_404(Plan, stripe_plan_id=new_plan_id)

            # Update the Stripe subscription
            stripe.Subscription.modify(
                active_subscription.stripe_subscription_id,
                items=[{
                    "id": active_subscription.subscription_items.first().stripe_subscription_item_id,
                    "price": new_plan.stripe_plan_id
                }],
                proration_behavior='create_prorations'
            )

            # Update the subscription in your database
            active_subscription.status = 'active'
            active_subscription.save()
            return handle_response("Subscription upgraded successfully.", is_error=False, status_code=200)

        except Exception as e:
            return handle_response(f"Failed to handle upgrade: {str(e)}", is_error=True, status_code=500)

    def handle_cart_checkout(self, request, account):
        try:
            # Fetch the user's cart
            cart = get_object_or_404(Cart, customer=account)
            cart_items = cart.cart_items.all()
            if not cart_items:
                return handle_response("Cart is empty.", is_error=True, status_code=400)

            # Create a new checkout instance
            checkout = Checkout.objects.create(
                success_url=request.build_absolute_uri('/checkout/success/'),
                return_url=request.build_absolute_uri('/checkout/failure/'),
                mode='payment',
                customer=account
            )

            # Add items from the cart to the checkout
            for cart_item in cart_items:
                price = cart_item.product.prices.first()
                if price:
                    checkout.add_item(
                        price_id=price.stripe_price_id,
                        quantity=cart_item.quantity
                    )

            # Create or update the Stripe checkout session
            checkout.create_stripe_session()

            # Clear the cart after successful Stripe session creation
            cart.cart_items.all().delete()

            # Redirect the user to the Stripe checkout URL
            stripe_checkout_url = stripe.checkout.Session.retrieve(checkout.stripe_checkout_id)['url']
            return redirect(stripe_checkout_url)

        except Exception as e:
            return handle_response(f"Failed to handle cart checkout: {str(e)}", is_error=True, status_code=500)
    
    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for CheckoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/checkout/admin.py
----------------------------------------



File: django/pages/classes/checkout/serializer.py
----------------------------------------



File: django/pages/classes/subscription/signal.py
----------------------------------------



File: django/pages/classes/subscription/__init__.py
----------------------------------------



File: django/pages/classes/subscription/model.py
----------------------------------------
import uuid, secrets
from django.utils.timezone import now, timedelta
from django.db import models
from ...models import Account, Price, Plan
class Subscription(models.Model):
    SUBSCRIPTION_STATUS_CHOICES = [
        ('incomplete', 'incomplete'),
        ('incomplete_expired', 'incomplete_expired'),
        ('trialing', 'trialing'),
        ('active', 'active'),
        ('past_due', 'past_due'),
        ('canceled', 'canceled'),
        ('unpaid', 'unpaid'),
        ('paused', 'paused'),
    ]
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer = models.ForeignKey(
        Account, to_field='stripe_customer_id', 
        on_delete=models.CASCADE, 
        related_name='subscriptions'
    )
    status = models.CharField(max_length=255, choices=SUBSCRIPTION_STATUS_CHOICES, default=None)
    stripe_subscription_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_subscription"


class SubscriptionItem(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    subscription = models.ForeignKey(
        Subscription, 
        on_delete=models.CASCADE, 
        related_name='subscription_items'
    )
    price = models.ForeignKey(
        Price, 
        to_field='stripe_price_id', 
        on_delete=models.CASCADE, 
        related_name='subscription_items',
        null=True
    )
    plan = models.ForeignKey(
        Plan, 
        to_field='stripe_plan_id', 
        on_delete=models.CASCADE, 
        related_name='subscription_items',
        null=True
    )
    quantity = models.PositiveIntegerField(default=1)
    stripe_subscription_item_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_subscription_item"


File: django/pages/classes/subscription/form.py
----------------------------------------



File: django/pages/classes/subscription/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.exceptions import AuthenticationFailed
from ...models import Account, Subscription
from ...views import authenticate_user

class SubscriptionView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'subscription/subscription.html')
        except Exception as e:
            message = f"'GET' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SubscriptionView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class SubscriptionsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Authenticate the user
            account = authenticate_user(request)
            user = request.user
            account = Account.objects.filter(id=user.id).first()

            # Fetch all subscriptions (active and inactive) for the user
            subscriptions = Subscription.objects.filter(
                customer=account.stripe_customer_id
            ).select_related('customer').prefetch_related('subscription_items__price', 'subscription_items__plan')

            return render(request, 'subscription/subscriptions.html', {"subscriptions": subscriptions})

        except AuthenticationFailed:
            return redirect('login')
        except Exception as e:
            message = f"'GET' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SubscriptionsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/subscription/admin.py
----------------------------------------



File: django/pages/classes/subscription/serializer.py
----------------------------------------



File: django/pages/classes/system/signal.py
----------------------------------------



File: django/pages/classes/system/__init__.py
----------------------------------------



File: django/pages/classes/system/model.py
----------------------------------------



File: django/pages/classes/system/form.py
----------------------------------------



File: django/pages/classes/system/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from ...models import Plan, Price

class IndexView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/index.html')
        except Exception as e:
            message = f"'GET' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for IndexView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class Error404View(APIView):
    def post(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/404.html')
        except Exception as e:
            message = f"'GET' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request, dummy=None, *args, **kwargs):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for Error404View: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')



class ResponseView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def get(self, request):
        try:
            # Handle GET requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def put(self, request):
        try:
            # Handle PUT requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def patch(self, request):
        try:
            # Handle PATCH requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def delete(self, request):
        try:
            # Handle DELETE requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            # Extract message, is_error, and status_code from query parameters
            message = request.GET.get("message", "Operation completed.")
            is_error = request.GET.get("is_error", "False") == "True"
            status_code = int(request.GET.get("status_code", 200))
            # Render the response page
            return render(request, 'system/response.html', {'message': message, 'is_error': is_error}, status=status_code)
        except Exception as e:
            return render(request, 'system/response.html', {'message': f"Error rendering response: {e}", "is_error": True}, status=500)


class AboutView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/about.html')
        except Exception as e:
            message = f"'GET' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for AboutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class ContactView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/contact.html')
        except Exception as e:
            message = f"'GET' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ContactView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        


class SupportView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/support.html')
        except Exception as e:
            message = f"'GET' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SupportView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class TermsOfServiceView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/terms-of-service.html')
        except Exception as e:
            message = f"'GET' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for TermsOfServiceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class PrivacyPolicyView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/privacy-policy.html')
        except Exception as e:
            message = f"'GET' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PrivacyPolicyView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class PlansAndPricingView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Filter plans and prices to show only those with a recurring interval
            monthly_plans = Plan.objects.filter(interval='month')
            yearly_plans = Plan.objects.filter(interval='year')
            monthly_prices = Price.objects.filter(recurring__interval='month')
            yearly_prices = Price.objects.filter(recurring__interval='year')

            # Combine plans and prices and add a unified 'stripe_id' key
            monthly_items = [
                {'product': item.product, 'amount': item.amount, 'stripe_id': item.stripe_plan_id}
                for item in monthly_plans
            ] + [
                {'product': item.product, 'amount': item.unit_amount, 'stripe_id': item.stripe_price_id}
                for item in monthly_prices
            ]

            yearly_items = [
                {'product': item.product, 'amount': item.amount, 'stripe_id': item.stripe_plan_id}
                for item in yearly_plans
            ] + [
                {'product': item.product, 'amount': item.unit_amount, 'stripe_id': item.stripe_price_id}
                for item in yearly_prices
            ]

            return render(request, 'system/plans-and-pricing.html', {
                'monthly_items': monthly_items,
                'yearly_items': yearly_items
            })
        except Exception as e:
            message = f"'GET' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PlansAndPricingView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class ResourceView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/resources.html')
        except Exception as e:
            message = f"'GET' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ResourceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class ResourcesView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/resources.html')
        except Exception as e:
            message = f"'GET' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ResourcesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')



class UserGuideView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/user-guides.html')
        except Exception as e:
            message = f"'GET' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for UserGuideView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    
class UserGuidesView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/user-guides.html')
        except Exception as e:
            message = f"'GET' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for UserGuidesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
class TutorialView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/tutorials.html')
        except Exception as e:
            message = f"'GET' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for TutorialView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
class TutorialsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/tutorials.html')
        except Exception as e:
            message = f"'GET' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for TutorialsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')



    


class CommunityForumView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/community-forum.html')
        except Exception as e:
            message = f"'GET' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for CommunityForumView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        

class SupportTicketView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/support-ticket.html')
        except Exception as e:
            message = f"'GET' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SupportTicketView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class WhitePaperView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/whitepaper.html')
        except Exception as e:
            message = f"'GET' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for WhitePaperView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class FAQsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'system/faqs.html')
        except Exception as e:
            message = f"'GET' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for FAQsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/system/admin.py
----------------------------------------



File: django/pages/classes/system/serializer.py
----------------------------------------



File: django/pages/classes/price/signal.py
----------------------------------------



File: django/pages/classes/price/__init__.py
----------------------------------------



File: django/pages/classes/price/model.py
----------------------------------------
import uuid
from django.db import models
from django.utils.timezone import now
from ...config.config import stripe
from ...models import Product

class Price(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    currency = models.CharField(max_length=3)
    recurring = models.JSONField(max_length=1024, null=True)
    product = models.ForeignKey(Product, to_field='stripe_product_id', on_delete=models.CASCADE, related_name='prices')
    unit_amount = models.DecimalField(default=0.00, max_digits=10, decimal_places=2)
    stripe_price_id = models.CharField(max_length=255, blank=True, unique=True, null=True)  # Stripe product ID
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def create_stripe_price(self):
        """Creates a Stripe price and stores the price ID."""
        try:
            # Convert unit_amount from dollars to cents
            if isinstance(self.unit_amount, str):
                self.unit_amount = float(self.unit_amount)  # Ensure the input is a float

            unit_amount_cents = int(self.unit_amount * 100)  # Convert dollars to cents

            # Validate the unit_amount_cents
            if not (1 <= unit_amount_cents <= 100000000):  # Stripe max unit amount is $1,000,000 (in cents)
                raise ValueError(f"Invalid unit_amount: {self.unit_amount}. Must be between $0.01 and $1,000,000.00.")

            # Create a new Stripe price
            price = stripe.Price.create(
                unit_amount=unit_amount_cents,  # Stripe expects the amount in cents
                currency=self.currency,
                recurring=self.recurring if self.recurring else None,
                product=self.product.stripe_product_id,
            )
            # Store the Stripe price ID in the model
            self.stripe_price_id = price.id
            self.save()
            return price
        except stripe.error.StripeError as e:
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to create Stripe price: {e}")
        except Exception as e:
            print(f"Error: {e}")
            raise Exception(f"Failed to create Stripe price: {e}")



    def update_stripe_price(self, **kwargs):
        """Updates the Stripe price with the provided details."""
        try:
            # Update the Stripe price
            price = stripe.Price.modify(
                self.stripe_price_id,
                **kwargs
            )
            # Optionally update local fields if needed
            if 'unit_amount' in kwargs:
                self.unit_amount = kwargs['unit_amount'] / 100  # Convert back from cents
            if 'currency' in kwargs:
                self.currency = kwargs['currency']
            self.save()
            return price
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to update Stripe price: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to update Stripe price: {e}")

    def delete_stripe_price(self):
        """Deletes the Stripe price associated with this price."""
        try:
            # Archive the Stripe price (Stripe does not allow full deletion of prices)
            stripe.Price.modify(
                self.stripe_price_id,
                active=False
            )
            # Optionally, mark the local price as deleted
            self.deleted = now()
            self.save()
            print("Stripe price archived successfully.")
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to delete Stripe price: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to delete Stripe price: {e}")

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_price"


File: django/pages/classes/price/form.py
----------------------------------------



File: django/pages/classes/price/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response

class PriceView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PriceView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class PricesView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for PricesView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/price/admin.py
----------------------------------------



File: django/pages/classes/price/serializer.py
----------------------------------------



File: django/pages/classes/setup_intent/signal.py
----------------------------------------



File: django/pages/classes/setup_intent/__init__.py
----------------------------------------



File: django/pages/classes/setup_intent/model.py
----------------------------------------



File: django/pages/classes/setup_intent/form.py
----------------------------------------



File: django/pages/classes/setup_intent/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response

class SetupIntentView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for SetupIntentView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/setup_intent/admin.py
----------------------------------------



File: django/pages/classes/setup_intent/serializer.py
----------------------------------------



File: django/pages/classes/cart/signal.py
----------------------------------------



File: django/pages/classes/cart/__init__.py
----------------------------------------



File: django/pages/classes/cart/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from django.utils.timezone import now
from django.contrib.auth.models import AbstractUser
from django.core.mail import send_mail
from ...config.config import stripe
from system.settings import DEFAULT_FROM_EMAIL, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD
from ...models import Account, Product
from django.conf import settings

class Cart(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer = models.ForeignKey(Account, to_field='stripe_customer_id',    on_delete=models.CASCADE, null=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def add_item(self, product_id, quantity=1):
        """
        Add a product to the cart or update its quantity if it already exists.
        """
        product = Product.objects.get(id=product_id)

        # Check if the product is already in the cart
        cart_item, created = CartItem.objects.get_or_create(
            cart=self,
            product=product,
            defaults={'quantity': quantity}
        )

        if not created:
            # Update the quantity if the item already exists
            cart_item.quantity += quantity
            cart_item.save()

        return cart_item

    def update_item_quantity(self, product_id, quantity):
        """
        Update the quantity of a specific product in the cart.
        """
        cart_item = self.cart_items.filter(product__id=product_id).first()
        if not cart_item:
            raise ValueError("Cart item does not exist.")

        if quantity > 0:
            cart_item.quantity = quantity
            cart_item.save()
        else:
            cart_item.delete()

        return cart_item

    def remove_item(self, product_id):
        """
        Remove a product from the cart.
        """
        cart_item = self.cart_items.filter(product__id=product_id).first()
        if cart_item:
            cart_item.delete()
        else:
            raise ValueError("Cart item does not exist.")

    def clear_cart(self):
        """
        Remove all items from the cart.
        """
        self.cart_items.all().delete()

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_cart"

class CartItem(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    cart = models.ForeignKey(
        Cart, 
        on_delete=models.CASCADE, 
        related_name='cart_items'
    )
    product = models.ForeignKey(Product, to_field='stripe_product_id', on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def update_quantity(self, quantity):
        """
        Update the quantity of this cart item.
        """
        if quantity > 0:
            self.quantity = quantity
            self.save()
        else:
            self.delete()

    def remove(self):
        """
        Remove this item from the cart.
        """
        self.delete()

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_cart_item"


File: django/pages/classes/cart/form.py
----------------------------------------



File: django/pages/classes/cart/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from django.shortcuts import redirect, get_object_or_404
from ...models import Product, Cart, CartItem

class CartView(APIView):
    def post(self, request, product_id):
        try:
            # Ensure the user is authenticated (otherwise, return a relevant error)
            if not request.user.is_authenticated:
                return redirect('login')  # Adjust this as per your login view
            account = request.user
            product = get_object_or_404(Product, id=product_id)  # Get the product by ID

            # Check if the user already has a Cart (either create a new one or fetch the existing one)
            cart, created = Cart.objects.get_or_create(customer=account)

            # Check if the product is already in the Cart (check if the CartItem exists)
            cart_item, item_created = CartItem.objects.get_or_create(cart=cart, product=product)

            # If the product is already in the cart, increase its quantity
            if not item_created:
                cart_item.quantity += 1
                cart_item.save()

            # Redirect to the cart page or show a success message
            return redirect('cart')  # Update with your actual cart page URL name

        except Exception as e:
            # Handle any errors gracefully
            message = f"'POST' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def get(self, request):
        try:
            # Ensure the user is authenticated
            if not request.user.is_authenticated:
                return redirect('login')  # Redirect to login if the user is not authenticated

            # Fetch the Cart for the user
            account = request.user  # Assuming the user object is directly linked to the account
            cart = get_object_or_404(Cart, customer=account)

            # Get all CartItems in the user's cart
            cart_items = CartItem.objects.filter(cart=cart)

            # Pass the cart items to the template
            context = {
                "cart_items": cart_items,
            }
            return render(request, 'cart/cart.html', context)
        except Cart.DoesNotExist:
            # If the cart doesn't exist, render the page with an empty cart message
            return render(request, 'cart/cart.html', {"cart_items": []})
        except Exception as e:
            # Handle errors gracefully
            message = f"'GET' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for CartView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/cart/admin.py
----------------------------------------



File: django/pages/classes/cart/serializer.py
----------------------------------------



File: django/pages/classes/api/signal.py
----------------------------------------



File: django/pages/classes/api/__init__.py
----------------------------------------



File: django/pages/classes/api/model.py
----------------------------------------
import uuid, secrets
from django.utils.timezone import now, timedelta
from django.db import models
from ...models import Account
class ApiKey(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
    )
    account = models.ForeignKey(Account, on_delete=models.CASCADE, related_name="api_keys")
    key = models.CharField(max_length=50, unique=True, default=secrets.token_urlsafe)
    active = models.BooleanField(default=True)
    revealed = models.BooleanField(default=False)
    primary = models.BooleanField(default=False)
    credit_limit = models.PositiveIntegerField(default=1000)
    credits_used = models.PositiveIntegerField(default=0)
    reset_date = models.DateTimeField(default=now)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return str(self.id)

    # Meta Class
    class Meta:
        db_table = "pages_api_key"



File: django/pages/classes/api/form.py
----------------------------------------



File: django/pages/classes/api/view.py
----------------------------------------
import uuid, secrets
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from ...models import ApiKey
class ApiView(APIView):
    def post(self, request):
        try:
            # Get the authenticated user's account
            account = request.user

            # Generate a new API key
            new_api_key = secrets.token_urlsafe(32)  # Generate a secure random API key

            # Create and save the new API key
            api_key = ApiKey.objects.create(
                account=account,
                key=new_api_key,
                primary=False,  # Set as non-primary by default
                credit_limit=1000,  # Example credit limit
                credits_used=0
            )

            # Success response
            message = "API Key created successfully."
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        
    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ApiView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/api/admin.py
----------------------------------------



File: django/pages/classes/api/serializer.py
----------------------------------------



File: django/pages/classes/log/signal.py
----------------------------------------



File: django/pages/classes/log/__init__.py
----------------------------------------



File: django/pages/classes/log/model.py
----------------------------------------



File: django/pages/classes/log/form.py
----------------------------------------



File: django/pages/classes/log/view.py
----------------------------------------
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response

class LogView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for LogView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/log/admin.py
----------------------------------------



File: django/pages/classes/log/serializer.py
----------------------------------------



File: django/pages/classes/account/signal.py
----------------------------------------



File: django/pages/classes/account/__init__.py
----------------------------------------



File: django/pages/classes/account/model.py
----------------------------------------
import uuid, pyotp, random
from django.db import models
from django.utils.timezone import now
from django.contrib.auth.models import AbstractUser
from django.core.mail import send_mail
from ...config.config import stripe
from system.settings import DEFAULT_FROM_EMAIL, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD


class Account(AbstractUser):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
    )
    
    username = models.CharField(max_length=255, unique=True, null=True, blank=True)
    name = models.CharField(max_length=255)
    description = models.CharField(max_length=255, null=True, blank=True)
    email = models.CharField(max_length=255, unique=True)
    email_confirmation_secret = models.CharField(max_length=16, blank=True, null=True)
    email_confirmed = models.BooleanField(default=False)
    mfa_secret = models.CharField(max_length=16, blank=True, null=True)
    mfa_enabled = models.BooleanField(default=False)
    mfa_confirmed = models.BooleanField(default=False)
    password = models.CharField(max_length=255)
    stripe_customer_id = models.CharField(max_length=255, blank=True, unique=True, null=True)
    created = models.DateTimeField(default=now)
    updated = models.DateTimeField(auto_now=True)
    deleted = models.DateTimeField(null=True, blank=True)

    def generate_email_confirmation_secret(self):
        """Generates an 8-digit numeric code for email confirmation."""
        self.email_confirmation_secret = '{:08d}'.format(random.randint(0, 99999999))
        self.save()

    def generate_mfa_secret_secret(self):
        """Generates mfa secret"""
        self.mfa_secret = pyotp.random_base32()
        self.save()

    def validate_email_confirmed(self):
        """Marks the email as confirmed."""
        self.email_confirmed = True
        self.save()

    def validate_mfa_confirmed(self):
        """Marks the mfa as confirmed."""
        self.mfa_confirmed = True
        self.save()

    def validate_mfa_unconfirmed(self):
        """Marks the mfa as confirmed."""
        self.mfa_confirmed = False
        self.save()

    def send_confirmation_email(self):
        """Send the confirmation email to the user."""
        user_name = self.name or self.username or "User"
        try:
            send_mail(
                subject=f"Please confirm your email, {user_name}",
                message=f"Your confirmation secret is: {self.email_confirmation_secret}",
                from_email=DEFAULT_FROM_EMAIL,
                recipient_list=[self.email],
                fail_silently=False,
            )
        except Exception as e:
            print(f"Failed to send email: {e}")
            raise Exception(f"Failed to send email: {e}")

    def create_stripe_customer(self):
        """Creates a Stripe customer and stores the customer ID."""
        try:
            # Create a new Stripe customer
            customer = stripe.Customer.create(
                email=self.email,
                name=self.name,
                description=f"Customer for {self.email}"
            )
            # Store the Stripe customer ID in the account
            self.stripe_customer_id = customer.id
            self.save()
            return customer
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to create Stripe customer: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to create Stripe customer: {e}")

    def update_stripe_customer(self, **kwargs):
        """Updates the Stripe customer with the provided details."""
        if not self.stripe_customer_id:
            raise Exception("Stripe customer ID not set for this account.")

        try:
            # Update the Stripe customer
            customer = stripe.Customer.modify(
                self.stripe_customer_id,
                **kwargs
            )
            return customer
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to update Stripe customer: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to update Stripe customer: {e}")
        

    def delete_stripe_customer(self):
        """Deletes the Stripe customer associated with this account."""
        if not self.stripe_customer_id:
            raise Exception("Stripe customer ID not set for this account.")

        try:
            # Delete the Stripe customer
            stripe.Customer.delete(self.stripe_customer_id)

            # Optionally, clear the stripe_customer_id field
            self.stripe_customer_id = None
            self.save()

            print("Stripe customer deleted successfully.")
        except stripe.error.StripeError as e:
            # Handle Stripe errors
            print(f"Stripe error: {e}")
            raise Exception(f"Failed to delete Stripe customer: {e}")
        except Exception as e:
            # Handle other exceptions
            print(f"Error: {e}")
            raise Exception(f"Failed to delete Stripe customer: {e}")


    def __str__(self):
        return self.username or self.email

    # Meta Class
    class Meta:
        db_table = "pages_account"


File: django/pages/classes/account/form.py
----------------------------------------



File: django/pages/classes/account/view.py
----------------------------------------
import uuid, pyotp, random, qrcode, io, base64
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from ...models import ApiKey, Subscription

class AccountView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Get the authenticated user's account
            account = request.user

            # Check MFA status
            if not account.mfa_confirmed and account.mfa_enabled:
                return redirect("verify-mfa")
            if(account.mfa_secret == None):
                account.generate_mfa_secret_secret()

            # Generate MFA QR code if needed
            # qr_code_data_uri = None
            # if not account.mfa_enabled and account.mfa_secret is None:
            #     account.generate_mfa_secret_secret()
            #     otp_uri = pyotp.totp.TOTP(account.mfa_secret).provisioning_uri(
            #         name=account.email,
            #         issuer_name="Clean SMRs"
            #     )
            #     qr = qrcode.make(otp_uri)
            #     buffer = io.BytesIO()
            #     qr.save(buffer, format="PNG")
            #     buffer.seek(0)
            #     qr_code = base64.b64encode(buffer.getvalue()).decode("utf-8")
            #     qr_code_data_uri = f"data:image/png;base64,{qr_code}"
            otp_uri = pyotp.totp.TOTP(account.mfa_secret).provisioning_uri(
                name=account.email,
                issuer_name="Clean SMRs"
            )
            qr = qrcode.make(otp_uri)
            buffer = io.BytesIO()
            qr.save(buffer, format="PNG")

            buffer.seek(0)
            qr_code = base64.b64encode(buffer.getvalue()).decode("utf-8")

            qr_code_data_uri = f"data:image/png;base64,{qr_code}"

            # Fetch API keys and subscriptions
            api_keys = ApiKey.objects.filter(account=account)
            subscriptions = Subscription.objects.filter(
                customer=account.stripe_customer_id, deleted__isnull=True, status='active'
            )

            # Get the active subscription plan
            current_subscription = subscriptions.first() if subscriptions.exists() else None
            current_plan = None
            if current_subscription:
                subscription_item = current_subscription.subscription_items.first()
                if subscription_item:
                    current_plan = {
                        "name": subscription_item.price.product.name,
                        "amount": subscription_item.price.unit_amount,
                        "interval": subscription_item.price.recurring.get("interval", "N/A"),
                    }

            # Render the account page with user data
            return render(request, 'account/account.html', {
                'account': account,
                'api_keys': api_keys,
                'current_plan': current_plan,
                'current_subscription': current_subscription,
                'token': request.COOKIES.get('jwt'),
                'qrcode': qr_code_data_uri,
            })
        except Exception as e:
            message = f"'GET' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for AccountView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/account/admin.py
----------------------------------------



File: django/pages/classes/account/serializer.py
----------------------------------------



File: django/pages/classes/authentication/signal.py
----------------------------------------



File: django/pages/classes/authentication/__init__.py
----------------------------------------



File: django/pages/classes/authentication/model.py
----------------------------------------



File: django/pages/classes/authentication/form.py
----------------------------------------



File: django/pages/classes/authentication/view.py
----------------------------------------
import jwt, pyotp, datetime
from ...models import Account
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.hashers import make_password
from django.core.mail import send_mail
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.exceptions import AuthenticationFailed
from rest_framework.authentication import BaseAuthentication

def authenticate_user(request):
    """Authenticate the user using JWT and return the account."""
    jwt_auth = JWTAuthentication()
    account, _ = jwt_auth.authenticate(request)
    if account is None:
        raise AuthenticationFailed('Authentication failed')
    return account

def check_mfa(account):
    if not account.mfa_confirmed and account.mfa_enabled:
            return redirect("verify-mfa")

class JWTAuthentication(BaseAuthentication):
    def authenticate(self, request):
        auth_header = request.headers.get('Authorization')
        token = None

        if auth_header:
            try:
                token_type, token = auth_header.split()
                if token_type.lower() != 'bearer':
                    raise AuthenticationFailed('Invalid token type')
            except ValueError:
                raise AuthenticationFailed('Invalid token header')
        else:
            token = request.COOKIES.get('jwt')

        if not token:
            return None
        try:
            payload = jwt.decode(token, 'secret-key', algorithms=['HS256'])
        except jwt.ExpiredSignatureError:
            raise AuthenticationFailed('Token has expired')
        except jwt.InvalidTokenError:
            raise AuthenticationFailed('Invalid token')

        account = Account.objects.filter(id=payload['id']).first()
        if account is None:
            raise AuthenticationFailed('User not found')

        return (account, None)

class ConfirmEmailView(APIView):
    def post(self, request):
        try:
            # Get the authenticated user's account
            account = request.user

            # Check if the request is to resend the confirmation code
            if request.data.get('resend') == 'true':
                # Generate a new confirmation secret and send email
                account.generate_email_confirmation_secret()
                account.send_confirmation_email()

                message = "Confirmation code resent successfully."
                is_error = False
                status_code = 200
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Handle email confirmation
            confirmation_code = request.data.get('confirmation_secret')

            # Validate input
            if not confirmation_code:
                message = "Confirmation code is required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Validate confirmation code
            if account.email_confirmation_secret != confirmation_code:
                message = "Invalid confirmation code."
                is_error = True
                status_code = 401
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Mark email as confirmed
            account.validate_email_confirmed()

            # Success response
            message = "Email confirmed successfully."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/confirm-email.html')
        except Exception as e:
            message = f"'GET' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ConfirmEmailView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class VerifyMfaView(APIView):
    def post(self, request):
        try:
            # Extract account ID and OTP from the request data
            account_id = request.data.get("account_id")
            otp = request.data.get("otp")

            if not account_id or not otp:
                message = "Account ID and OTP are required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Retrieve the account using the account_id
            account = Account.objects.get(id=account_id)

            # Verify the OTP using the account's MFA secret
            totp = pyotp.TOTP(account.mfa_secret)
            if totp.verify(otp):
                # If OTP is correct, mark MFA as confirmed
                account.validate_mfa_confirmed()
                message = "MFA verification successful."
                is_error = False
                status_code = 200
            else:
                # If OTP is incorrect, return an error
                message = "Invalid OTP. Please try again."
                is_error = True
                status_code = 400

        except Account.DoesNotExist:
            message = "Account not found."
            is_error = True
            status_code = 404
        except Exception as e:
            message = f"'POST' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500

        return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    
    def get(self, request):
        try:
            account = request.user
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/verify-mfa.html', {"account_id": account.id})
        except Exception as e:
            message = f"'GET' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for VerifyMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class EnableMfaView(APIView):
    def post(self, request):
        try:
            # Get the authenticated user's account
            account = request.user

            # Generate a new MFA secret if it doesn't exist
            if not account.mfa_secret:
                account.generate_mfa_secret_secret()

            # Get the MFA code from the request
            mfa_code = request.data.get('otp')

            # Validate input
            if not mfa_code:
                message = "MFA code is required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Verify the MFA code
            totp = pyotp.TOTP(account.mfa_secret)
            if not totp.verify(mfa_code):
                message = "Invalid MFA code."
                is_error = True
                status_code = 401
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Enable MFA for the account
            account.mfa_enabled = True
            account.save()

            # Success response
            message = "MFA enabled successfully."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def get(self, request):
        try:
            account = request.user
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/enable-mfa.html', {'account':account})
        except Exception as e:
            message = f"'GET' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for EnableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class DisableMfaView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for DisableMfaView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class LoginView(APIView):
    def post(self, request):
        try:
            # Extract email and password from request
            email = request.data.get('email')
            password = request.data.get('password')

            # Validate input
            if not email or not password:
                message = "Email and password are required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Check if account exists
            account = Account.objects.filter(email=email).first()
            if not account:
                message = "Account not found."
                is_error = True
                status_code = 404
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Authenticate user
            user = authenticate(request, username=account.username, password=password)
            if not user:
                message = "Invalid credentials."
                is_error = True
                status_code = 401
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Log the user in
            login(request, user)

            # Create JWT token
            try:
                payload = {
                    'id': str(account.id),
                    'username': str(account.username),
                    'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=60),
                    'iat': datetime.datetime.utcnow()
                }
                token = jwt.encode(payload, 'secret-key', algorithm='HS256')
            except Exception as e:
                message = f"Failed to create JWT: {e}"
                is_error = True
                status_code = 500
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Set token in response cookie
            response = redirect('index')  # Redirect to homepage (index.html)
            response.set_cookie(key='jwt', value=token, httponly=True)

            return response

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/login.html')
        except Exception as e:
            message = f"'GET' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for LoginView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


class RegisterView(APIView):
    def post(self, request):
        try:
            # Extract data from request
            email = request.data.get('email')
            password = request.data.get('password')
            username = request.data.get('username')
            name = request.data.get('name')

            # Validate input
            if not email or not password or not username:
                message = "Email, password, and username are required."
                is_error = True
                status_code = 400
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Check if email or username already exists
            if Account.objects.filter(email=email).exists():
                message = "Email is already in use."
                is_error = True
                status_code = 409
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            if Account.objects.filter(username=username).exists():
                message = "Username is already in use."
                is_error = True
                status_code = 409
                return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

            # Create new account
            account = Account(
                email=email,
                name=name,
                username=username,
                password=make_password(password)  # Hash the password
            )
            account.save()
            account.create_stripe_customer()

            # Success response
            message = "Account created successfully."
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'authentication/register.html')
        except Exception as e:
            message = f"'GET' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for RegisterView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    

class LogoutView(APIView):
    def post(self, request):
        try:
            # Log out the user
            logout(request)

            # Clear the JWT token from cookies
            response = redirect('index')  # Redirect to homepage (index.html)
            response.delete_cookie('jwt')

            # Success response
            message = "Successfully logged out."
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

        except Exception as e:
            # General exception handling
            message = f"'POST' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            message = "GET request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'GET' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for LogoutView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/authentication/admin.py
----------------------------------------



File: django/pages/classes/authentication/serializer.py
----------------------------------------



File: django/pages/classes/observation/signal.py
----------------------------------------



File: django/pages/classes/observation/__init__.py
----------------------------------------



File: django/pages/classes/observation/model.py
----------------------------------------



File: django/pages/classes/observation/form.py
----------------------------------------



File: django/pages/classes/observation/view.py
----------------------------------------
import requests, os
from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.exceptions import AuthenticationFailed
from ...models import ApiKey, Subscription
from django.conf import settings
from ...views import authenticate_user, check_mfa

FLASK_URL = os.getenv('FLASK_URL')
FLASK_LOCAL_HOST_URL = os.getenv('FLASK_LOCAL_HOST_URL')

if settings.DEBUG:
    FLASK_URL = FLASK_LOCAL_HOST_URL



class ObservationView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Handle GET requests
            # message = "GET request received"
            # is_error = False
            # status_code = 200
            # return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
            return render(request, 'observation/observation.html')
        except Exception as e:
            message = f"'GET' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ObservationView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

class ObservationsView(APIView):
    def post(self, request):
        try:
            # Handle POST requests
            message = "POST request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'POST' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def get(self, request):
        try:
            # Authenticate the user
            account = authenticate_user(request)
            check_mfa(account=account)

            # Get the user's primary API key
            api_key = ApiKey.objects.filter(account=account, primary=True).first()
            if not api_key:
                message = "No Primary API key selected in your Account, please either generate a new key or select and set one"
                return render(request, 'observation/observations.html', {"observations": [], "message": message})

            # Check if the user has an active subscription
            subscription = Subscription.objects.filter(customer=account, status='active', deleted__isnull=True).first()
            if not subscription:
                message = "You need to subscribe to access this feature"
                return render(request, 'observation/observations.html', {"observations": [], "message": message})

            # Fetch observations from the external API
            url = f"{FLASK_URL}/observations"
            headers = {
                "X-API-KEY": api_key.key,
            }
            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                observations = response.json()
                return render(request, 'observation/observations.html', {"observations": observations})
            else:
                message = f"Failed to fetch observations: {response.text}"
                return render(request, 'observation/observations.html', {"observations": [], "message": message})

        except AuthenticationFailed:
            return redirect('login')
        except Exception as e:
            return render(request, 'system/response.html', {
                'message': f"'GET' Method Failed for ObservationsView: {e}",
                "is_error": True
            }, status=400)

    def put(self, request):
        try:
            # Handle PUT requests
            message = "PUT request received"
            is_error = False
            status_code = 201
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PUT' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')

    def patch(self, request):
        try:
            # Handle PATCH requests
            message = "PATCH request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'PATCH' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def delete(self, request):
        try:
            # Handle DELETE requests
            message = "DELETE request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'DELETE' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def options(self, request, *args, **kwargs):
        try:
            # Handle OPTIONS requests
            message = "OPTIONS request received"
            is_error = False
            status_code = 204
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'OPTIONS' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
    def head(self, request, *args, **kwargs):
        try:
            # Handle HEAD requests
            # Since Django automatically handles HEAD, no implementation is required
            # The HEAD response will be the same as GET but without the body
            message = "HEAD request received"
            is_error = False
            status_code = 200
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')
        except Exception as e:
            message = f"'HEAD' Method Failed for ObservationsView: {e}"
            is_error = True
            status_code = 500
            return redirect(f'/response?message={message}&is_error={is_error}&status_code={status_code}')


File: django/pages/classes/observation/admin.py
----------------------------------------



File: django/pages/classes/observation/serializer.py
----------------------------------------



File: django/pages/validators.py
----------------------------------------



File: django/pages/management/commands/create_superuser_if_none.py
----------------------------------------
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model

class Command(BaseCommand):
    help = 'Create a superuser if none exists'

    def handle(self, *args, **kwargs):
        User = get_user_model()
        if not User.objects.filter(is_superuser=True).exists():
            User.objects.create_superuser(
                username='admin',
                email='admin@cleansmrs.com',
                password='123456@Aa'
            )
            self.stdout.write(self.style.SUCCESS('Superuser created.'))
        else:
            self.stdout.write(self.style.SUCCESS('Superuser already exists.'))


File: django/pages/__init__.py
----------------------------------------



File: django/pages/apps.py
----------------------------------------
from django.apps import AppConfig


class PagesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'pages'



File: django/pages/forms.py
----------------------------------------
from .classes.account.form import *
from .classes.authentication.form import *
from .classes.system.form import *
from .classes.product.form import *
from .classes.plan.form import *
from .classes.subscription.form import *
from .classes.cart.form import *
from .classes.checkout.form import *
from .classes.api.form import *
from .classes.order.form import *
from .classes.observation.form import *
from .classes.webhook.form import *


File: django/pages/admin.py
----------------------------------------
from django.contrib import admin

# Register your models here.



File: django/pages/utils.py
----------------------------------------



File: django/pages/tests.py
----------------------------------------
from django.test import TestCase

# Create your tests here.



File: django/pages/urls.py
----------------------------------------
from django.urls import path
from .views import *

urlpatterns = [
    path('account', AccountView.as_view(), name="account"),
    path('account/edit', AccountView.as_view(), name="account-edit"),
    # # authentication start
    path('confirm-email', ConfirmEmailView.as_view(), name="confirm-email"),
    path('verify-mfa', VerifyMfaView.as_view(), name="verify-mfa"),
    path('verify-mfa/<uuid:otp>', VerifyMfaView.as_view(), name="verify-mfa"),
    path('enable-mfa', EnableMfaView.as_view(), name="enable-mfa"),
    path('disable-mfa', DisableMfaView.as_view(), name="disable-mfa"),
    path('login', LoginView.as_view(), name="login"),
    path('logout', LogoutView.as_view(), name="logout"),
    path('register', RegisterView.as_view(), name="register"),
    # # authentication end
    # # ========================================================================== #
    # # ========================================================================== #

    # # system start
    path('', IndexView.as_view(), name="index"),
    path('about', AboutView.as_view(), name="about"),
    path('contact', ContactView.as_view(), name="contact"),
    path('contact/submit', ContactView.as_view(), name="contact-submit"),
    path('support', SupportView.as_view(), name="support"),
    path('support/submit', SupportView.as_view(), name="support-submit"),
    path('terms-of-service', TermsOfServiceView.as_view(), name="terms-of-service"),
    path('privacy-policy', PrivacyPolicyView.as_view(), name="privacy-policy"),
    path('plans-and-pricing', PlansAndPricingView.as_view(), name="plans-and-pricing"),
    path('resources', ResourcesView.as_view(), name="resources"),
    path('user-guides', UserGuidesView.as_view(), name="user-guides"),
    path('tutorials', TutorialsView.as_view(), name="tutorials"),
    path('community-forum', CommunityForumView.as_view(), name="community-forum"),
    path('support-ticket', SupportTicketView.as_view(), name="support-ticket"),
    path('submit-support-ticket', SupportTicketView.as_view(), name="submit-support-ticket"),
    path('user-guide-smr', UserGuideView.as_view(), name="user-guide-smr"),
    path('user-guide-portal', UserGuideView.as_view(), name="user-guide-portal"),
    path('tutorial-setup', TutorialView.as_view(), name="tutorial-setup"),
    path('tutorial-maintenance', TutorialView.as_view(), name="tutorial-maintenance"),
    path('whitepaper-clean-energy', WhitePaperView.as_view(), name="whitepaper-clean-energy"),
    path('whitepaper-smr-technology', WhitePaperView.as_view(), name="whitepaper-smr-technology"),
    path('faqs', FAQsView.as_view(), name="faqs"),
    # path('<path:dummy>/', Error404View.as_view(), name="Error-404"),
    # # system end
    # # ========================================================================== #
    # # ========================================================================== #
    # # product start
    # Product-related URLs
    path('products/', ProductsView.as_view(), name="products-list"),
    path('products/create/', ProductView.as_view(), name="product-create"),
    path('products/create', ProductView.as_view(), name="product-create"),
    path('products/buy-now/<uuid:product_id>/', ProductsView.as_view(), name="buy-now"),
    path('products/<uuid:product_id>/', ProductView.as_view(), name="product-detail"),
    path('products/<uuid:product_id>/update/', ProductView.as_view(), name="product-update"),
    path('products/<uuid:product_id>/update', ProductView.as_view(), name="product-update"),
    path('products/<uuid:product_id>/delete/', ProductView.as_view(), name="product-delete"),
    path('products/<uuid:product_id>/delete', ProductView.as_view(), name="product-delete"),
    # path('product', ProductView.as_view(), name="product"),
    # path('product/create', ProductView.as_view(), name="product-create"),
    # path('product/update/<uuid:product_id>', ProductView.as_view(), name="product-update"),
    # path('product/delete/<uuid:product_id>', ProductView.as_view(), name="product-delete"),
    # path('product/<uuid:product_id>', ProductView.as_view(), name="product"),
    # path('product/<uuid:product_id>/', ProductView.as_view(), name="product"),
    path('products', ProductsView.as_view(), name="products"),
    path('products/', ProductsView.as_view(), name="products"),
    # # product end
    # # ========================================================================== #
    # # ========================================================================== #
    # # subscription start
    path('subscription', SubscriptionView.as_view(), name="subscription"),
    path('subscription/create', SubscriptionView.as_view(), name="subscription-create"),
    path('subscription/cancel', SubscriptionView.as_view(), name="subscription-cancel"),
    path('subscription/<uuid:subscription_id>', SubscriptionView.as_view(), name="subscription"),
    path('subscriptions', SubscriptionsView.as_view(), name="subscriptions"),
    path('subscriptions/',SubscriptionsView.as_view(), name="subscriptions"),
    # # order end
    # # ========================================================================== #
    # # ========================================================================== #    
    # # checkout start
    path('checkout', CheckoutView.as_view(), name="checkout"),
    path('checkout/create', CheckoutView.as_view(), name="checkout-create"),
    path('checkout/subscribe', CheckoutView.as_view(), name="checkout-subscribe"),
    path('checkout/upgrade', CheckoutView.as_view(), name="checkout-upgrade"),
    path('checkout/<uuid:checkout_id>', CheckoutView.as_view(), name="checkout"),
    path('checkout/success', CheckoutView.as_view(), name="checkout-success"),
    path('checkout/success/', CheckoutView.as_view(), name="checkout-success"),
    path('checkout/failure', CheckoutView.as_view(), name="checkout-failure"),
    path('checkout/failure/', CheckoutView.as_view(), name="checkout-failure"),
    # # checkout end
    # # ========================================================================== #
    # # ========================================================================== #
    # # cart start
    path('cart', CartView.as_view(), name="cart"),
    # path('add-to-cart', CartView.as_view(), name='add-to-cart'),
    # Updated URL pattern for 'add-to-cart' to accept a product_id
    path('add-to-cart/<uuid:product_id>/', CartView.as_view(), name='add-to-cart'),
    path('remove-from-cart', CartView.as_view(), name='remove-from-cart'),
    path('update-item/<uuid:cart_item_id>/', CartView.as_view(), name='update-cart-item'),
    path('remove-item/<uuid:cart_item_id>/', CartView.as_view(), name='remove-cart-item'),# # cart end
    # # ========================================================================== #
    # # ========================================================================== #
    # # order start
    path('order', OrderView.as_view(), name="order"),
    path('order/create', OrderView.as_view(), name="order-create"),
    path('order/<uuid:order_id>', OrderView.as_view(), name="order"),
    path('orders', OrdersView.as_view(), name="orders"),
    path('orders/', OrdersView.as_view(), name="orders"),
    # # order end
    # # ========================================================================== #
    # # ========================================================================== #
    # # observation start
    path('observation', ObservationView.as_view(), name="observation"),
    path('observation/create', ObservationView.as_view(), name="observation-create"),
    path('observation/<uuid:observation_id>', ObservationView.as_view(), name="observation"),
    path('observations', ObservationsView.as_view(), name="observations"),
    path('observations/', ObservationsView.as_view(), name="observations"),
    # # order end
    # # ========================================================================== #
    # # ========================================================================== #
    # # webhook start
    path('webhook', WebhookView.as_view(), name="webhook"),
    # # webhook end
    # # ========================================================================== #
    # # ========================================================================== #
    # # api key start
    path('api-key', ApiView.as_view(), name="api-key"),
    path('api-key/validate', ApiView.as_view(), name="api-key-validate"),
    path('api-key/validate/', ApiView.as_view(), name="api-key-validate"),
    path('api-key/generate', ApiView.as_view(), name="api-key-generate"),
    path('api-key/generate/', ApiView.as_view(), name="api-key-generate"),
    path('api-key/re-generate', ApiView.as_view(), name="api-key-re-generate"),
    path('api-key/re-generate/', ApiView.as_view(), name="api-key-re-generate"),
    path('api-key/reveal', ApiView.as_view(), name="api-key-reveal"),
    path('api-key/reveal/', ApiView.as_view(), name="api-key-reveal"),
    path('api-key/set-primary', ApiView.as_view(), name='set-primary-key'),
    path('api-key/set-primary/', ApiView.as_view(), name='set-primary-key'),
    # # api key end
    # # ========================================================================== #
    # # ========================================================================== #
    path('response', ResponseView.as_view(), name="response"),
]


File: django/pages/views.py
----------------------------------------
from .classes.account.view import *
from .classes.authentication.view import *
from .classes.system.view import *
from .classes.product.view import *
from .classes.plan.view import *
from .classes.subscription.view import *
from .classes.cart.view import *
from .classes.checkout.view import *
from .classes.api.view import *
from .classes.order.view import *
from .classes.observation.view import *
from .classes.webhook.view import *


